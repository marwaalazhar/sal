{"version":3,"sources":["images/icons/down-arrow.svg","images/logo.svg","images/icons/alert.svg","images/icons/question-mark.svg","state/ducks/auth0/types.ts","state/ducks/auth0/utils.ts","state/ducks/auth0/actions.ts","state/ducks/users/types.ts","state/middlewares/apiService.ts","state/ducks/users/actions.ts","state/ducks/questions/types.ts","state/ducks/answers/types.ts","state/ducks/answers/actions.ts","views/components/avatar.tsx","views/components/dropdown.tsx","views/components/navbar.tsx","views/components/questionSection.tsx","state/ducks/questions/actions.ts","views/components/spinner.tsx","views/components/answerSection.tsx","views/components/questionForm.tsx","views/components/header.tsx","views/components/footer.tsx","views/pages/home.tsx","views/pages/question.tsx","state/ducks/search/types.ts","state/ducks/search/actions.ts","views/pages/search.tsx","routes/index.ts","views/layouts/app.tsx","serviceWorker.ts","state/ducks/auth0/reducers.ts","state/ducks/auth0/index.ts","state/ducks/questions/reducers.ts","state/ducks/questions/index.ts","state/ducks/users/reducers.ts","state/ducks/users/index.ts","state/ducks/answers/reducers.ts","state/ducks/answers/index.ts","state/ducks/search/reducers.ts","state/ducks/search/index.ts","state/store.ts","index.tsx"],"names":["module","exports","Types","createBrowserHistory","requestInitAuth0","type","INIT_AUTH0_REQUEST","initAuth0Success","successPayload","INIT_AUTH0_SUCCESS","payload","initAuth0Error","error","INIT_AUTH0_ERROR","defaultHandleRedirect","appState","window","history","replaceState","document","title","location","pathname","CALL_API","Symbol","apiService","next","action","call","endpoint","token","types","config","requestType","successType","errorType","headers","Object","assign","Authorization","fetch","then","response","json","data","ok","Promise","reject","callApi","receivedAt","Date","now","catch","message","loadUser","id","dispatch","getState","users","entities","get","USER_REQUEST","USER_SUCCESS","USER_FAILURE","fetchUser","loadAnswer","answers","ANSWER_REQUEST","ANSWER_SUCCESS","ANSWER_FAILURE","fetchAnswer","Avatar","src","size","info","className","alt","name","role","defaultProps","Dropdown","btnContent","dropdownClass","btnClass","children","useDropdown","useState","active","setActive","dropdownRef","useRef","hide","useEffect","handleEscape","evt","stopPropagation","keyCode","handleDocumentClick","clicked","target","current","contains","addEventListener","removeEventListener","ref","aria-haspopup","aria-expanded","onClick","aria-labelledby","Children","map","child","props","cloneElement","Nav","currentUser","userName","user","user_metadata","firstname","lastname","alert","questionMark","style","marginRight","picture","goToProfile","textTransform","logout","connect","state","auth0","client","isAuthenticated","isFetching","useHistory","inputVal","setInputVal","to","logo","width","height","loading","onSubmit","preventDefault","push","placeholder","aria-label","value","onChange","currentTarget","loginWithRedirect","paddingRight","paddingLeft","returnTo","origin","mapDispatchToProps","deleteQuestion","Q_DELETE_REQUEST","Q_DELETE_SUCCESS","Q_DELETE_FAILURE","method","accessToken","question","user_id","job","currentUserQuestion","createdAt","created_at","toLocaleDateString","length","downArrow","content","Spinner","xmlns","viewBox","cx","cy","r","AnswerContent","requestBASent","setRequestBASent","isUpdatingQuestion","showDropdown","setShowDropdown","answer","currentUserAnswer","questionUserId","isBestAnswer","bestAnswer","selectBestAnswer","question_id","deleteAnswer","answer_id","Q_BA_REQUEST","Q_BA_SUCCESS","Q_BA_FAILURE","body","JSON","stringify","A_DELETE_REQUEST","A_DELETE_SUCCESS","postAnswer","questionId","A_POST_REQUEST","A_POST_SUCCESS","A_POST_FAILURE","isPostingAnswer","isPosting","formActive","setFormActive","textareaVal","setTextareaVal","postingAnswer","setPostingAnswer","key","Math","random","toString","slice","answerExists","rows","disabled","confirm","postQuestion","Q_POST_REQUEST","Q_POST_SUCCESS","Q_POST_FAILURE","formFocused","setFormFocused","handleBlur","onFocus","onBlur","Header","Footer","href","loadQuestions","questions","nextPageUrl","pageCount","QUESTIONS_REQUEST","QUESTIONS_SUCCESS","QUESTIONS_FAILURE","fetchQuestions","isFetchingQuestions","isPostingQuestion","isUpdating","requestedUsers","Set","values","has","add","best_answer","QAComponents","margin","condition","marginBottom","marginTop","textAlign","loadQuestion","QUESTION_REQUEST","QUESTION_SUCCESS","QUESTION_FAILURE","fetchQuestion","useParams","parseInt","unshift","padding","color","goBack","searchQuestions","search","SEARCH_REQUEST","SEARCH_SUCCESS","SEARCH_FAILURE","loadSearch","searchTerm","routes","path","component","Home","exact","QuestionPage","useLocation","params","URLSearchParams","QComponents","initAuth0","initOptions","handleRedirect","createAuth0Client","auth0Client","a","includes","handleRedirectCallback","getTokenSilently","parse","atob","split","sub","err","isLoading","domain","client_id","clientId","audience","redirect_uri","useRefreshToken","targetUrl","route","Boolean","hostname","match","defaultState","errorMessage","auth0Reducer","reducer","Map","questionsReducer","newEntities","entity","set","next_path","noOfQuestions","no_of_questions","lastUpdated","delete","del_id","created","patched","AnswersTypes","filter","usersReducer","answersReducer","A_DELETE_FAILURE","searchReducer","search_term","store","createStore","combineReducers","reducers","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"kQAAAA,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,8TCE/BC,E,wDCDGC,gB,mCDCHD,K,wCAAAA,E,wCAAAA,E,qCAAAA,M,KA+BGA,Q,QE9Bf,SAASE,IACP,MAAO,CACLC,KAAMH,EAAMI,oBAIhB,SAASC,EAAiBC,GACxB,MAAO,CACLH,KAAMH,EAAMO,mBACZC,QAASF,GAIb,SAASG,EAAeC,GACtB,MAAO,CACLP,KAAMH,EAAMW,iBACZD,SAaJ,SAASE,EAAsBC,GAC7BC,OAAOC,QAAQC,aAAa,GAAIC,SAASC,MAAOJ,OAAOK,SAASC,U,ICjCtDpB,E,iBAAAA,K,4BAAAA,E,4BAAAA,E,6BAAAA,M,gBC+BL,IAAMqB,EAAWC,OAAO,YAgChBC,EA/BI,kBAAM,SAACC,GAAD,OAAe,SAACC,GACvC,IAAMC,EAAOD,EAAOJ,GAGpB,GAAoB,qBAATK,EACT,OAAOF,EAAKC,GALyC,IAQjDE,EAAwCD,EAAxCC,SAAUC,EAA8BF,EAA9BE,MAAOC,EAAuBH,EAAvBG,MARgC,EAQTH,EAAhBI,cARyB,MAQhB,GARgB,gBASTD,EATS,GAShDE,EATgD,KASnCC,EATmC,KAStBC,EATsB,KAevD,OAJAT,EAAK,CACHrB,KAAM4B,IA1CV,SAAiBJ,EAAkBG,EAAaF,GAgB9C,OAfIA,IAEEE,EAAOI,QACTC,OAAOC,OAAON,EAAOI,QAAS,CAC5BG,cAAc,UAAD,OAAYT,KAG3BO,OAAOC,OAAON,EAAQ,CACpBI,QAAS,CACPG,cAAc,UAAD,OAAYT,OAM1BU,MAlBO,GAkBSX,EAAUG,GAC9BS,MAAK,SAACC,GACL,OAAOA,EAASC,OAAOF,MAAK,SAACG,GAAD,MAAW,CAAEA,OAAMF,kBAEhDD,MAAK,YAAyB,IAAtBG,EAAqB,EAArBA,KACP,OAD4B,EAAfF,SACCG,GAIPD,EAHEE,QAAQC,OAAOH,MAuBrBI,CAAQnB,EAAUG,EAAQF,GAC9BW,MAAK,SAACC,GACL,OAAOhB,EAAK,CACVuB,WAAYC,KAAKC,MACjBzC,QAASgC,EACTrC,KAAM6B,OAGTkB,OAAM,SAACxC,GACN,OAAOc,EAAK,CACVd,MAAOA,EAAMyC,QACbhD,KAAM8B,UC9CP,SAASmB,EAASC,GACvB,OAAO,SAAUC,EAAeC,GAG9B,OAFaA,IAAWC,MAAMC,SAASC,IAAIL,KAE9BA,EACJ,KAEFC,EAhBX,SAAmBD,GACjB,OAAO,eACJhC,EAAW,CACVM,SAAS,cAAD,OAAgB0B,GACxBxB,MAAO,CAAC7B,EAAM2D,aAAc3D,EAAM4D,aAAc5D,EAAM6D,gBAYxCC,CAAUT,K,ICnBlBrD,ECAAA,E,qBCYL,SAAS+D,EAAWV,GACzB,OAAO,SAAUC,EAAeC,GAG9B,OAFeA,IAAWS,QAAQP,SAASC,IAAIL,KAEhCA,EACN,KAEFC,EAhBX,SAAqBD,GACnB,OAAO,eACJhC,EAAW,CACVM,SAAS,gBAAD,OAAkB0B,GAC1BxB,MAAO,CAAC7B,EAAMiE,eAAgBjE,EAAMkE,eAAgBlE,EAAMmE,kBAY5CC,CAAYf,M,SFnBpBrD,K,sCAAAA,E,sCAAAA,E,sCAAAA,E,oCAAAA,E,oCAAAA,E,oCAAAA,E,oCAAAA,E,oCAAAA,E,oCAAAA,E,gCAAAA,E,gCAAAA,E,gCAAAA,E,4BAAAA,E,4BAAAA,E,6BAAAA,M,cCAAA,K,gCAAAA,E,gCAAAA,E,gCAAAA,E,oCAAAA,E,oCAAAA,E,oCAAAA,E,gCAAAA,E,gCAAAA,E,iCAAAA,M,4DEWNqE,EAAmC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,IAAKC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACrD,OACE,yBAAKC,UAAS,iBAAYF,IACxB,yBAAKE,UAAU,cACb,yBAAKH,IAAKA,EAAKI,IAAKF,EAAOA,EAAKG,KAAO,SAAW,kBAEnDH,GACC,uBAAGC,UAAU,eACVD,EAAKG,KACLH,EAAKI,MACJ,oCACE,6BACA,2BAAOH,UAAU,cAAcD,EAAKI,UAQlDP,EAAOQ,aAAe,CACpBN,KAAM,MAGOF,QC6EAS,EA7F4B,SAAC,GAMrC,IALLC,EAKI,EALJA,WACAC,EAII,EAJJA,cACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,SACAC,EACI,EADJA,YACI,EAEsBC,oBAAkB,GAFxC,mBAECC,EAFD,KAESC,EAFT,KAGJ,GAAIH,EAAa,mBAGOA,EAHP,GAGdE,EAHc,KAGNC,EAHM,KAKjB,IAAMC,EAAcC,iBAAuB,MAyC3C,SAASC,IACPH,GAAU,GAOZ,OAhDAI,qBAAU,WACR,SAASC,EAAaC,GACpBA,EAAIC,kBACiB,KACjBD,EAAIE,SACNL,IAIJ,SAASM,EAAoBH,GAAkB,IAAD,EAC5CA,EAAIC,kBACJ,IAAMG,EAAUJ,EAAIK,OAGlBD,IAAYT,EAAYW,UAAxB,UACAX,EAAYW,eADZ,aACA,EAAqBC,SAASH,KAKhCP,IAMF,OAJAxE,SAASmF,iBAAiB,QAASL,GAAqB,GACxD9E,SAASmF,iBAAiB,UAAWT,GAAc,GAG5C,WACL1E,SAASoF,oBAAoB,QAASN,GAAqB,GAC3D9E,SAASoF,oBAAoB,UAAWV,GAAc,MAEvD,IAmBD,yBAAKW,IAAKf,EAAad,UAAWO,EAAgBA,EAAgB,YAAc,YAC9E,4BACEP,UAAWQ,EAAWA,EAAW,OAAS,MAC1CsB,gBAAc,OACdC,gBAAenB,EACfoB,QAtBN,SAAoBb,GACdP,EACFI,IAWFH,GAAU,KAWLP,GAGH,yBACEN,UAAWY,EAAS,qBAAuB,gBAC3CqB,kBAAgB,oBAEfC,WAASC,IAAI1B,GAAU,SAAC2B,GACvB,GAAKA,GAAUA,EAAMC,MAGrB,OAAOC,uBAAaF,EAAO,CACzBpC,UAAWoC,EAAMC,MAAMrC,UACnBoC,EAAMC,MAAMrC,UAAY,iBACxB,wB,QCxFhB,SAASuC,EAAIF,GAAkB,IAAD,EAI5B,IAAIG,EACFC,EAAW,aASb,OARIJ,EAAMK,OAERD,GADAD,EAAcH,EAAMK,MACGC,cACnBH,EAAYG,cAAcC,UAC1B,IACAJ,EAAYG,cAAcE,SAC1BL,EAAYtC,MAGhB,wBAAIF,UAAU,cACZ,wBAAIA,UAAU,YACZ,4BAAQA,UAAU,cAAcgC,QAhBtC,WACE3F,OAAOyG,MAAM,6CAgBP,yBAAKjD,IAAKiD,IAAO7C,IAAI,aAAaD,UAAU,WAGhD,wBAAIA,UAAU,YACZ,4BAAQA,UAAU,eAChB,yBAAKH,IAAKkD,IAAc9C,IAAI,qBAAqBD,UAAU,WAG/D,wBAAIA,UAAU,WAAWgD,MAAO,CAAEC,YAAa,SAC7C,kBAAC,EAAD,CACE3C,WAAY,kBAAC,EAAD,CAAQT,KAAgB,QAAX,EAAA2C,SAAA,eAAaU,UAAW,GAAIpD,KAAK,OAC1DU,SAAS,cAET,4BACEwB,QAASK,EAAMc,YACfH,MAAO,CAAEI,cAAe,eAEvBX,GAEH,4BAAQT,QAASK,EAAMgB,QAAvB,aAkGV,IAEeC,eAZf,SAAyBC,GACvB,MAAO,CACLC,MAAOD,EAAMC,MAAMC,OACnBC,gBAAiBH,EAAMC,MAAME,gBAC7BlB,YAAae,EAAMC,MAAMhB,YACzBmB,WAAYJ,EAAMxE,MAAM4E,WACxB5E,MAAOwE,EAAMxE,MAAMC,YAII,GAEZsE,EAtFf,SAAgBjB,GACd,IAAM/F,EAAUsH,cADY,EAEIjD,mBAAiB,IAFrB,mBAErBkD,EAFqB,KAEXC,EAFW,KA2B5B,OACE,yBAAK9D,UAAU,qCACb,kBAAC,IAAD,CAAM+D,GAAG,IAAI/D,UAAU,qBACrB,yBACEA,UAAU,WACVH,IAAKmE,IACLC,MAAM,KACNC,OAAO,KACPjE,IAAI,WACJkE,QAAQ,SAEV,0BAAMnE,UAAU,eAAhB,oBAEF,0BAAMA,UAAU,4BAA4BoE,SAzBhD,SAAsBjD,GAEpB,GADAA,EAAIkD,kBACCR,EACH,OAAO,KAETvH,EAAQgI,KAAR,uBAA6BT,MAqBzB,2BACE7D,UAAU,uBACVtE,KAAK,SACL6I,YAAY,SACZC,aAAW,SACXC,MAAOZ,EACPa,SAxBR,SAAsBvD,GACpB2C,EAAY3C,EAAIwD,cAAcF,YA0B1BpC,EAAMqB,iBACN,4BACE1D,UAAU,qBACVgC,QAlDR,WACEK,EAAMmB,MAAMoB,kBAAkB,KAkDxB5B,MAAO,CACL6B,aAAc,OACdC,YAAa,OACb7B,YAAa,UANjB,WAYDZ,EAAMqB,iBACL,kBAACnB,EAAD,CACEG,KAAML,EAAMtD,MAAME,IAAIoD,EAAMG,cAAgB,KAC5Ca,OA3DR,WACEhB,EAAMmB,MAAMH,OAAO,CAAE0B,SAAU1I,OAAOK,SAASsI,UA2DzC7B,YAxDR,WACE9G,OAAOyG,MAAM,0D,iBCcjB,IAAMmC,EAAqB,CACzBC,eCxCK,SAAwBtG,EAAYzB,GACzC,OAAKyB,EAIE,eACJhC,EAAW,CACVM,SAAS,kBAAD,OAAoB0B,GAC5BzB,MAAOA,EACPC,MAAO,CACL7B,EAAM4J,iBACN5J,EAAM6J,iBACN7J,EAAM8J,kBAERhI,OAAQ,CACNiI,OAAQ,YAZL,ODuCIhC,eAXf,SAAyBC,GACvB,MAAO,CACLpG,MAAOoG,EAAMC,MAAM+B,YACnB/C,YAAae,EAAMC,MAAMhB,YACzBzD,MAAOwE,EAAMxE,MAAMC,YAOiBiG,EAAzB3B,EA9Ef,SAAyBjB,GACvB,IAAIK,EAAOL,EAAMtD,MAAME,IAAIoD,EAAMmD,SAASC,SACtCC,EAAM,aACRjD,EAAW,aACTC,IACFD,EAAWC,EAAKC,cACZD,EAAKC,cAAcC,UAAY,IAAMF,EAAKC,cAAcE,SACxDH,EAAKxC,KACTwF,EAAMhD,EAAKC,cAAgBD,EAAKC,cAAc+C,IAAM,qBAEtD,IAAMC,EAAsBtD,EAAMG,cAAgBH,EAAMmD,SAASC,QAU3DG,EAAY,IAAIrH,KAAK8D,EAAMmD,SAASK,YAC1C,OACE,yBAAK7F,UAAU,WAAWgD,MAAOX,EAAMW,OACrC,yBAAKhD,UAAU,eACb,kBAAC,EAAD,CACEH,KAAS,OAAJ6C,QAAI,IAAJA,OAAA,EAAAA,EAAMQ,UAAW,GACtBnD,KAAM,CAAEG,KAAMuC,EAAUtC,KAAMuF,KAEhC,yBAAK1F,UAAU,wBACb,uBAAGA,UAAU,WACX,+BACG4F,EAAUE,qBACX,6BACA,0BAAM9F,UAAU,cACZqC,EAAMmD,SAASjG,QAAQwG,OAEa,IAAlC1D,EAAMmD,SAASjG,QAAQwG,OACvB,WADA,UAEG1D,EAAMmD,SAASjG,QAAQwG,OAF1B,YADA,oBAOV,kBAAC,EAAD,CACEzF,WACE,yBAAKN,UAAU,OAAOH,IAAKmG,IAAW/F,IAAI,qBAG5C,kBAAC,IAAD,CAAM8D,GAAE,qBAAgB1B,EAAMmD,SAAS5G,KAAvC,kBACE+G,GACA,4BAAQ3D,QAtCpB,WACEc,MAAM,wDAqCI,wBAED6C,GACC,4BAAQ3D,QAnCpB,WACEK,EAAM6C,eAAe7C,EAAMmD,SAAS5G,GAAIyD,EAAMlF,SAkCpC,mBAEDwI,GACC,4BAAQ3D,QAzCpB,WACEc,MAAM,wDAwCI,sBAKR,yBAAK9C,UAAU,aACb,uBAAGA,UAAU,aAAaqC,EAAMmD,SAASS,cEvDlCC,MAlBf,YAAwC,IAArBlG,EAAoB,EAApBA,UACjB,OACE,yBAAKA,UAAWA,GACd,yBACEmG,MAAM,6BACNC,QAAQ,YACRnE,kBAAgB,gBAChB9B,KAAK,UACLH,UAAU,WAEV,2BAAOpB,GAAG,iBAAV,cACA,4BAAQoB,UAAU,iBAAiBqG,GAAG,KAAKC,GAAG,KAAKC,EAAE,OACrD,4BAAQvG,UAAU,sBAAsBqG,GAAG,KAAKC,GAAG,KAAKC,EAAE,UCKlE,SAASC,EAAcnE,GAAoB,MAGC1B,oBAAkB,GAHnB,mBAGlC8F,EAHkC,KAGnBC,EAHmB,KAIzCzF,qBAAU,WACHoB,EAAMsE,oBACTD,GAAiB,KAElB,CAACrE,EAAMsE,qBAR+B,MASDhG,oBAAkB,GATjB,mBASlCiG,EATkC,KASpBC,EAToB,KA4BzC,IAAInE,EAAOL,EAAMtD,MAAME,IAAIoD,EAAMyE,OAAOrB,SACpCC,EAAM,aACRjD,EAAW,aACTC,IACFD,EAAWC,EAAKC,cACZD,EAAKC,cAAcC,UAAY,IAAMF,EAAKC,cAAcE,SACxDH,EAAKxC,KACTwF,EAAMhD,EAAKC,cAAgBD,EAAKC,cAAc+C,IAAM,qBAGtD,IAAMqB,EAAoB1E,EAAMG,cAAgBH,EAAMyE,OAAOrB,QACvDE,EAAsBtD,EAAMG,cAAgBH,EAAM2E,eAClDpB,EAAY,IAAIrH,KAAK8D,EAAMyE,OAAOjB,YAClCoB,EAAe5E,EAAM6E,aAAe7E,EAAMyE,OAAOlI,GACvD,OACE,oCACE,yBAAKoB,UAAU,eACb,kBAAC,EAAD,CACEH,KAAS,OAAJ6C,QAAI,IAAJA,OAAA,EAAAA,EAAMQ,UAAW,GACtBnD,KAAM,CAAEG,KAAMuC,EAAUtC,KAAMuF,KAEhC,yBAAK1F,UAAU,wBACb,uBAAGA,UAAU,WACX,+BACG4F,EAAUE,qBACX,6BACA,0BAAM9F,UAAU,cACbyG,EACG,aACAQ,EACA,mBACA,iBAIV,kBAAC,EAAD,CACEvG,YAAa,CAACkG,EAAcC,GAC5BvG,WACE,yBAAKN,UAAU,OAAOH,IAAKmG,IAAW/F,IAAI,sBAG1C8G,GACA,4BAAQ/E,QA5DpB,WACEc,MAAM,wDA2DI,sBAED6C,GACC,4BAAQ3D,QAzDpB,WACEK,EAAM8E,iBACJ9E,EAAMyE,OAAOM,YACb/E,EAAMyE,OAAOlI,GACbyD,EAAMlF,OAERuJ,GAAiB,GACjBG,GAAgB,KAkDN,sBAEDE,GACC,4BAAQ/E,QA/DpB,WACEc,MAAM,wDA8DI,iBAEDiE,GACC,4BAAQ/E,QAtDpB,WACEK,EAAMgF,aAAahF,EAAMyE,OAAOlI,GAAIyD,EAAMlF,SAqDhC,oBAKR,yBAAK6C,UAAU,aACb,uBAAGA,UAAU,aAAaqC,EAAMyE,OAAOb,WA+K/C,IAAMhB,EAAqB,CACzBkC,iBFhMK,SACLC,EACAE,EACAnK,GAEA,OAAO,eACJP,EAAW,CACVM,SAAS,kBAAD,OAAoBkK,GAC5BjK,MAAOA,EACPC,MAAO,CAAC7B,EAAMgM,aAAchM,EAAMiM,aAAcjM,EAAMkM,cACtDpK,OAAQ,CACNiI,OAAQ,QACRoC,KAAMC,KAAKC,UAAU,CAAEd,OAAQQ,IAC/B7J,QAAS,CACP,eAAgB,wBEmLxB4J,aPtQK,SAAsBzI,EAAYzB,GACvC,OAAO,eACJP,EAAW,CACVM,SAAS,gBAAD,OAAkB0B,GAC1BzB,MAAOA,EACPC,MAAO,CACL7B,EAAMsM,iBACNtM,EAAMuM,iBACNvM,EAAMmE,gBAERrC,OAAQ,CACNiI,OAAQ,aO4PdyC,WPtPK,SAAoBC,EAAoB/B,EAAiB9I,GAC9D,OAAO,eACJP,EAAW,CACVM,SAAS,kBAAD,OAAoB8K,EAApB,YACR7K,MAAOA,EACPC,MAAO,CAAC7B,EAAM0M,eAAgB1M,EAAM2M,eAAgB3M,EAAM4M,gBAC1D9K,OAAQ,CACNiI,OAAQ,OACRoC,KAAMC,KAAKC,UAAU,CAAE3B,YACvBxI,QAAS,CACP,eAAgB,yBO8OX6F,eAbf,SAAyBC,GACvB,MAAO,CACLpG,MAAOoG,EAAMC,MAAM+B,YACnB/C,YAAae,EAAMC,MAAMhB,YACzBzD,MAAOwE,EAAMxE,MAAMC,SACnBoJ,gBAAiB7E,EAAMhE,QAAQ8I,aAQKpD,EAAzB3B,EA9Jf,SAAuBjB,GAAe,IAAD,EACC1B,oBAAkB,GADnB,mBAC5B2H,EAD4B,KAChBC,EADgB,OAEG5H,mBAAiB,IAFpB,mBAE5B6H,EAF4B,KAEfC,EAFe,OAKO9H,oBAAkB,GALzB,mBAK5B+H,EAL4B,KAKbC,EALa,KAMnC1H,qBAAU,WACHoB,EAAM+F,iBACTO,GAAiB,KAElB,CAACtG,EAAM+F,kBAsBV,IAAI7I,EAAU,KA6Bd,OA5BI8C,EAAM9C,UACRA,EAAU8C,EAAM9C,QAAQ4C,KAAI,SAAC2E,GAC3B,OACE,kBAAC,WAAD,CAAU8B,IAAKC,KAAKC,SAASC,SAAS,IAAIC,MAAM,IAC9C,8BACElC,GACA,yBAAK9G,UAAU,oBAAoBgD,MAAO,CAAEkB,OAAQ,SAClD,kBAAC,EAAD,CAASlE,UAAU,iCAGtB8G,GACC,kBAACN,EAAD,CACEM,OAAQA,EACR/H,MAAOsD,EAAMtD,MACbyD,YAAaH,EAAMG,YACnB0E,WAAY7E,EAAM6E,WAClBF,eAAgB3E,EAAM2E,eACtBG,iBAAkB9E,EAAM8E,iBACxBhK,MAAOkF,EAAMlF,MACbkK,aAAchF,EAAMgF,aACpBV,mBAAoBtE,EAAMsE,0BASpC,yBAAK3G,UAAU,gBAEXT,GACA,sCACM8C,EAAMyE,QAAUzE,EAAM4G,cAAiBP,IACzC,yBAAK1I,UAAU,oBAAoBgD,MAAO,CAAEkB,OAAQ,SAClD,kBAAC,EAAD,CAASlE,UAAU,iCAGtBqC,EAAMyE,QACL,kBAACN,EAAD,CACEM,OAAQzE,EAAMyE,OACd/H,MAAOsD,EAAMtD,MACbyD,YAAaH,EAAMG,YACnB0E,WAAY7E,EAAM6E,WAClBF,eAAgB3E,EAAM2E,eACtBG,iBAAkB9E,EAAM8E,iBACxBhK,MAAOkF,EAAMlF,MACbkK,aAAchF,EAAMgF,aACpBV,mBAAoBtE,EAAMsE,qBAG7BtE,EAAM4G,cAAgB,8BAG3B,yBAAKjJ,UAAU,sBACb,4BAAQA,UAAU,eAAegC,QA7EvC,WACEuG,GAAc,KA4EV,mBAGClG,EAAM4G,eAAiB1J,GACtB,kBAAC,IAAD,CAAMwE,GAAE,qBAAgB1B,EAAM2F,YAAchI,UAAU,gBAAtD,qBAKHsI,GACC,oCACE,6BACA,0BAAMtL,OAAO,GAAGgD,UAAU,cAAcoE,SA5EhD,SAAsBjD,GACpBA,EAAIkD,iBACJhC,EAAM0F,WAAW1F,EAAM2F,WAAYQ,EAAanG,EAAMlF,OACtDsL,EAAe,IACfF,GAAc,GACdI,GAAiB,KAwET,yBAAK3I,UAAU,cACb,8BACEE,KAAK,GACLtB,GAAG,GACHsK,KAAM,EACNlJ,UAAU,eACVyE,MAAO+D,EACP9D,SAAU,SAACvD,GACTsH,EAAetH,EAAIwD,cAAcF,WAIvC,4BACE/I,KAAK,SACLsE,UAAU,kBACVmJ,SAA0B,KAAhBX,GAHZ,UAOA,4BACE9M,KAAK,SACLsE,UAAU,oBACVgC,QA7GZ,WACE,GAAoB,KAAhBwG,IACcnM,OAAO+M,QAAQ,gCAE7B,OAGJX,EAAe,IACfF,GAAc,KAkGN,YAWLhJ,GACC,oCACGmJ,GACC,yBAAK1I,UAAU,oBAAoBgD,MAAO,CAAEkB,OAAQ,SAClD,kBAAC,EAAD,CAASlE,UAAU,iCAGtBT,OCpLX,IAAM0F,EAAqB,CACzBoE,aHdK,SAAsBpD,EAAiB9I,GAC5C,OAAO,eACJP,EAAW,CACVM,SAAU,iBACVC,MAAOA,EACPC,MAAO,CAAC7B,EAAM+N,eAAgB/N,EAAMgO,eAAgBhO,EAAMiO,gBAC1DnM,OAAQ,CACNiI,OAAQ,OACRoC,KAAMC,KAAKC,UAAU,CAAE3B,YACvBxI,QAAS,CACP,eAAgB,yBGOX6F,gBAZf,SAAyBC,GACvB,MAAO,CACLpG,MAAOoG,EAAMC,MAAM+B,YACnB/C,YAAae,EAAMC,MAAMhB,YACzBzD,MAAOwE,EAAMxE,MAAMC,YAQiBiG,EAAzB3B,EAhFf,SAAsBjB,GAAe,IAAD,EACI1B,oBAAkB,GADtB,mBAC3B8I,EAD2B,KACdC,EADc,OAEI/I,mBAAiB,IAFrB,mBAE3B6H,EAF2B,KAEdC,EAFc,KAMlC,SAASkB,IACPD,GAAe,GAejB,IAAMlH,EAAcH,EAAMtD,MAAME,IAAIoD,EAAMG,aAC1C,OACE,oCACGiH,GAAe,yBAAKzJ,UAAU,oBAC/B,0BACEhD,OAAO,GACP4M,QAzBN,WACEF,GAAe,IAyBXG,OAAQF,EACRvF,SAdN,SAAsBjD,GACpBA,EAAIkD,iBACJhC,EAAMgH,aAAab,EAAanG,EAAMlF,OACtCsL,EAAe,IACfkB,KAWI3J,UAAS,wBAAmByJ,EAAc,QAAU,IACpDzG,MAAOX,EAAMW,OAEb,yBAAKhD,UAAU,aACf,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAQH,KAAgB,OAAX2C,QAAW,IAAXA,OAAA,EAAAA,EAAaU,UAAW,KACrC,8BACEqB,YAAY,wBACZ2E,KAAM,EACNzE,MAAO+D,EACP9D,SAhCV,SAAsBvD,GACpBsH,EAAetH,EAAIwD,cAAcF,YAkC3BgF,GAAejB,IACf,oCACE,6BACA,4BACE9M,KAAK,SACLsE,UAAU,eACVmJ,SAA0B,KAAhBX,GAHZ,UAOA,4BACE9M,KAAK,SACLsE,UAAU,eACVgC,QA7CZ,WACEyG,EAAe,IACfiB,GAAe,KAwCP,gBCrDGI,OAVf,WACE,OACE,4BAAQ9J,UAAU,eAChB,yBAAKA,UAAU,aACb,kBAAC,EAAD,SCQO+J,OAZf,SAAgB1H,GACd,OACE,4BAAQrC,UAAU,eAChB,yBAAKA,UAAU,aACb,uBAAGA,UAAU,cAAb,2BAC0B,uBAAGgK,KAAK,6CAAR,mBC2HlC,IAAM/E,GAAqB,CACzBgF,cNnHK,WACL,OAAO,SAAUpL,EAAeC,GAAgB,IAAD,EAE3CA,IAAWoL,WAAa,GAFmB,IACrCC,mBADqC,MACvB,iBADuB,MACLC,UAGxC,WAJ6C,MACO,EADP,GAI7B,IAAMD,EAGtB,OAAOtL,EArBX,SAAwBsL,GACtB,OAAO,eACJvN,EAAW,CACVM,SAAUiN,EACV/M,MAAO,CACL7B,EAAM8O,kBACN9O,EAAM+O,kBACN/O,EAAMgP,qBAcMC,CAAeL,MM4GjCxL,WACAW,cAEagE,gBAjBf,SAAyBC,GACvB,MAAO,CACLf,YAAae,EAAMC,MAAMhB,YACzB0H,UAAW3G,EAAM2G,UAAUlL,SAC3BmL,YAAa5G,EAAM2G,UAAUC,YAC7BM,oBAAqBlH,EAAM2G,UAAUvG,WACrC+G,kBAAmBnH,EAAM2G,UAAU7B,UACnC1B,mBAAoBpD,EAAM2G,UAAUS,WACpC5L,MAAOwE,EAAMxE,MAAMC,SACnBO,QAASgE,EAAMhE,QAAQP,YAQaiG,GAAzB3B,EA7Gf,SAAcjB,GACZpB,qBAAU,WAKJoB,EAAM6H,UAAUpK,KAAO,IACzBuC,EAAM4H,gBAERzN,SAASC,MAAQ,8BAChB,IACH,IAAMmO,EAAiB7J,iBAAoB,IAAI8J,KAC/C5J,qBAAU,WAAO,IAAD,gBACSoB,EAAM6H,UAAUY,UADzB,IACd,2BAAiD,CAAC,IAAvCtF,EAAsC,QAI5CoF,EAAenJ,QAAQsJ,IAAIvF,EAASC,UACrCD,EAASC,UAAYpD,EAAMG,cAE3BH,EAAM1D,SAAS6G,EAASC,SACxBmF,EAAenJ,QAAQuJ,IAAIxF,EAASC,UAGtCpD,EAAM/C,WAAWkG,EAASyF,aAAezF,EAASjG,QAAQ,KAZ9C,iCAcb,CAAC8C,EAAM6H,YAEVjJ,qBAAU,WAAO,IAAD,gBACOoB,EAAM9C,QAAQuL,UADrB,IACd,2BAA6C,CAAC,IAAnChE,EAAkC,QAExC8D,EAAenJ,QAAQsJ,IAAIjE,EAAOrB,UACnCqB,EAAOrB,UAAYpD,EAAMG,cAEzBH,EAAM1D,SAASmI,EAAOrB,SACtBmF,EAAenJ,QAAQuJ,IAAIlE,EAAOrB,WAPxB,iCAUb,CAACpD,EAAM9C,UAMV,IA5C0B,EA4CtB2L,EAA4B,GA5CN,cA6CH7I,EAAM6H,UAAUY,UA7Cb,IA6C1B,2BAAiD,CAAC,IAAvCtF,EAAsC,QAC/C0F,EAAa5G,KACX,yBAAKsE,IAAKpD,EAAS5G,IACjB,kBAAC,EAAD,CACEgK,IAAKpD,EAAS5G,GACdoE,MAAO,CAAEmI,OAAQ,cACjB3F,SAAUA,IAEZ,kBAAC,EAAD,CACE0B,WAAY1B,EAASyF,YACrBhC,aAAczD,EAASjG,QAAQwG,OAAS,EACxCe,OAAQzE,EAAM9C,QAAQN,IACpBuG,EAASyF,aAAezF,EAASjG,QAAQ,IAE3CyI,WAAYxC,EAAS5G,GACrBoI,eAAgBxB,EAASC,QACzBkB,mBAAoBtE,EAAMsE,wBA7DR,8BAmE1B,IAAMyE,EACH/I,EAAMoI,qBAAgD,IAAzBpI,EAAM6H,UAAUpK,MAC9CuC,EAAMqI,kBACR,OACE,yBAAK1K,UAAU,oBAAoBgD,MAAO,CAAEqI,aAAc,SACxD,kBAAC,GAAD,CAAcrI,MAAO,CAAEsI,UAAW,UAEjCF,GACC,yBAAKpL,UAAU,oBAAoBgD,MAAO,CAAEkB,OAAQ,UAClD,kBAAC,EAAD,CAASlE,UAAU,iCAGtBkL,EACA7I,EAAM8H,aACL,yBACEnH,MAAO,CAAEuI,UAAW,SAAUD,UAAW,QACzCtJ,QA3CR,WACEK,EAAM4H,kBA4CA,4BAAQjK,UAAU,gBAAlB,kBC/BV,ICjFYzE,GDiFN0J,GAAqB,CACzBuG,aPvCK,SAAsB5M,GAC3B,OAAO,SAAUC,EAAeC,GAG9B,OAFeA,IAAWoL,UAAUlL,SAASC,IAAIL,KAElCA,EACN,KAEFC,EApBX,SAAuBD,GACrB,OAAO,eACJhC,EAAW,CACVM,SAAS,kBAAD,OAAoB0B,GAC5BxB,MAAO,CACL7B,EAAMkQ,iBACNlQ,EAAMmQ,iBACNnQ,EAAMoQ,oBAaMC,CAAchN,MOiChCU,cAIagE,gBAdf,SAAyBC,GACvB,MAAO,CACL2G,UAAW3G,EAAM2G,UAAUlL,SAC3B2H,mBAAoBpD,EAAM2G,UAAUS,WACpCpL,QAASgE,EAAMhE,QAAQP,YAYzBiG,GAFa3B,EAvEf,SAAsBjB,GACpB,IAAM/F,EAAUsH,cACRoE,EAAe6D,cAAf7D,WACR/G,qBAAU,WACRoB,EAAMmJ,aAAaM,SAAS9D,MAC3B,IAEH/G,qBAAU,WACR,IAAMuE,EAAWnD,EAAM6H,UAAUjL,IAAI6M,SAAS9D,IAC9C,GAAIxC,EAAU,CAAC,IAAD,gBACYA,EAASjG,SADrB,IACZ,2BAA0C,CAAC,IAAhC+H,EAA+B,QACxCjF,EAAM/C,WAAWgI,IAFP,8BAIZ9K,SAASC,MAAQ,SAAW+I,EAASS,QAAQ+C,MAAM,EAAG,IAAM,SAE7D,CAAC3G,EAAM6H,YAEV,IAAM1E,EAAWnD,EAAM6H,UAAUjL,IAAI6M,SAAS9D,IAC9C,IAAKxC,EACH,OACE,yBAAKxF,UAAU,oBAAoBgD,MAAO,CAAEkB,OAAQ,UAClD,kBAAC,EAAD,CAASlE,UAAU,iCAKzB,IA1BkC,EA0B5BT,EAAU,GA1BkB,cA2BViG,EAASjG,SA3BC,IA2BlC,2BAA0C,CAAC,IAAhC+H,EAA+B,QACpCA,IAAc9B,EAASyF,YAEzB1L,EAAQwM,QAAQ1J,EAAM9C,QAAQN,IAAIqI,IAElC/H,EAAQ+E,KAAKjC,EAAM9C,QAAQN,IAAIqI,KAhCD,8BAmClC,OACE,yBAAKtH,UAAU,oBAAoBgD,MAAO,CAAEqI,aAAc,SACxD,4BACErL,UAAU,eACVgD,MAAO,CAAEgJ,QAAS,WAAYC,MAAO,WACrCjK,QAAS,kBAAM1F,EAAQ4P,WAHzB,cAOA,kBAAC,EAAD,CAAiBlJ,MAAO,CAAEmI,OAAQ,aAAe3F,SAAUA,IAC3D,kBAAC,EAAD,CACEwC,WAAYxC,EAAS5G,GACrBoI,eAAgBxB,EAASC,QACzBkB,mBAAoBtE,EAAMsE,mBAC1BsC,aAAczD,EAASjG,QAAQwG,OAAS,EACxCmB,WAAY1B,EAASyF,YACrB1L,QAASA,QE/DjB,SAAS4M,GAAgBC,EAAgBjC,GACvC,OAAO,eACJvN,EAAW,CACVM,SAAUiN,EACV/M,MAAO,CAAC7B,GAAM8Q,eAAgB9Q,GAAM+Q,eAAgB/Q,GAAMgR,gBAC1DlP,OAAQ,CACNiI,OAAQ,OACRoC,KAAMC,KAAKC,UAAU,CACnBwE,OAAQA,IAEV3O,QAAS,CACP,eAAgB,wB,SDfdlC,K,gCAAAA,E,gCAAAA,E,iCAAAA,Q,KEsGZ,IAAM0J,GAAqB,CACzBuH,WDjFK,SAAoBJ,GACzB,OAAO,SAAUvN,EAAeC,GAAgB,IAAD,EAE3CA,IAAWsN,QAAU,GADfK,EADqC,EACrCA,WADqC,IACzBtC,mBADyB,MACX,cADW,MACIC,iBADJ,MACgB,EADhB,EAK7C,OAAmB,OAAfqC,GAAuBA,IAAeL,EACjCvN,EAASsN,GAAgBC,EAAQ,gBAGtChC,EAAY,IAAMD,EACb,KAGFtL,EAASsN,GAAgBC,EAAQjC,MCoE1CxL,YCnFa+N,GAlBA,CACb,CACEC,KAAM,IACNC,UAAWC,GACXC,OAAO,GAET,CACEH,KAAM,yBACNC,UAAWG,GACXD,OAAO,GAET,CACEH,KAAM,UACNC,UD0FWtJ,aAZf,SAAyBC,GACvB,MAAO,CACLf,YAAae,EAAMC,MAAMhB,YACzB0H,UAAW3G,EAAM6I,OAAOpN,SACxByL,oBAAqBlH,EAAM6I,OAAOzI,WAClCwG,YAAa5G,EAAM6I,OAAOjC,eAOUlF,GAAzB3B,EA3Ff,SAAoBjB,GAAe,IACzB+J,EAAWY,cAAXZ,OACFa,EAAS,IAAIC,gBAAgBd,GACnCnL,qBAAU,WACJgM,EAAOhO,IAAI,UACboD,EAAMmK,WAAWS,EAAOhO,IAAI,SAC5BzC,SAASC,MAAQ,oBAAsBwQ,EAAOhO,IAAI,WAEnD,CAACmN,IAEJ,IAAMxB,EAAiB7J,iBAAoB,IAAI8J,KAe/C,GAdA5J,qBAAU,WAAO,IAAD,gBACSoB,EAAM6H,UAAUY,UADzB,IACd,2BAAiD,CAAC,IAAvCtF,EAAsC,QAI5CoF,EAAenJ,QAAQsJ,IAAIvF,EAASC,UACrCD,EAASC,UAAYpD,EAAMG,cAE3BH,EAAM1D,SAAS6G,EAASC,SACxBmF,EAAenJ,QAAQuJ,IAAIxF,EAASC,WAT1B,iCAYb,CAACpD,EAAM6H,aAEL+C,EAAOhO,IAAI,QACd,OACE,yBAAKe,UAAU,qBACb,6DASN,IArCgC,EAqC5BmN,EAA2B,GArCC,cAsCT9K,EAAM6H,UAAUY,UAtCP,IAsChC,2BAAiD,CAAC,IAAvCtF,EAAsC,QAC/C2H,EAAY7I,KACV,yBAAKsE,IAAKpD,EAAS5G,IACjB,kBAAC,EAAD,CACEgK,IAAKpD,EAAS5G,GACdoE,MAAO,CAAEmI,OAAQ,cACjB3F,SAAUA,IAEZ,yBAAKxF,UAAU,eACb,yBAAKA,UAAU,sBACb,kBAAC,IAAD,CAAM+D,GAAE,qBAAgByB,EAAS5G,IAAMoB,UAAU,gBAAjD,sBAhDsB,8BAyDhC,IAAMoL,EAAY/I,EAAMoI,qBAAgD,IAAzBpI,EAAM6H,UAAUpK,KAC/D,OACE,yBAAKE,UAAU,oBAAoBgD,MAAO,CAAEqI,aAAc,SAEvDD,GACC,yBAAKpL,UAAU,oBAAoBgD,MAAO,CAAEkB,OAAQ,UAClD,kBAAC,EAAD,CAASlE,UAAU,iCAGtBmN,EACA9K,EAAM8H,aACL,yBACEnH,MAAO,CAAEuI,UAAW,SAAUD,UAAW,QACzCtJ,QArCR,WACEK,EAAMmK,WAAWS,EAAOhO,IAAI,WAsCtB,4BAAQe,UAAU,gBAAlB,kBCtEN8M,OAAO,IC2DX,IAAM7H,GAAqB,CACzBmI,UvBzCK,SACLC,GAEC,IADDC,EACA,uDADiBnR,EAEjB,OAAO,SAAU0C,GACfA,EAASpD,KACT8R,YAAkBF,GACfvP,KADH,uCACQ,WAAO0P,GAAP,qBAAAC,EAAA,0DAGFpR,OAAOK,SAAS0P,OAAOsB,SAAS,WAChCrR,OAAOK,SAAS0P,OAAOsB,SAAS,UAJ9B,gCAMqBF,EAAYG,yBANjC,OAMIvR,EANJ,OAOFkR,EAAelR,GAPb,uBAS0BoR,EAAY9J,kBATtC,UASEA,EATF,OAUA6B,EAAc,KAChB/C,EAAc,MACZkB,EAZA,kCAakB8J,EAAYI,mBAb9B,QAaFrI,EAbE,OAeF/C,EAAcmF,KAAKkG,MAAMC,KAAKvI,EAAYwI,MAAM,KAAK,KAAKC,IAfxD,QAiBJnP,EACEjD,EAAiB,CACf4R,cACA9J,kBACA6B,cACA/C,iBAtBA,4CADR,uDA2BG/D,OAAM,SAACwP,GACNpP,EAAS7C,EAAeiS,EAAIvP,euBQlCC,YAGa2E,gBAbf,SAAyBC,GACvB,MAAO,CACL2K,UAAW3K,EAAMC,MAAM0K,UACvBxK,gBAAiBH,EAAMC,MAAME,gBAC7BlB,YAAae,EAAMC,MAAMhB,eASWyC,GAAzB3B,EAhEf,SAAajB,GA4BX,OA3BApB,qBAAU,WASRoB,EAAM+K,UACJ,CACEe,OAAQ9Q,EAAO8Q,OACfC,UAAW/Q,EAAOgR,SAClBC,SAAUjR,EAAOiR,SACjBC,aAAclS,OAAOK,SAASsI,OAC9BwJ,gBAAiBnR,EAAOmR,kBAdA,SAACpS,GAC3BE,EAAQgI,KACNlI,GAAYA,EAASqS,UACjBrS,EAASqS,UACTpS,OAAOK,SAASC,eAcvB,IACHsE,qBAAU,WAEJoB,EAAMqB,iBACRrB,EAAM1D,SAAS0D,EAAMG,eAEtB,CAACH,EAAMqB,kBAENrB,EAAM6L,UAEN,yBAAKlO,UAAU,OACb,kBAAC,EAAD,CAASA,UAAU,8BAMvB,kBAAC,IAAD,CAAQ1D,QAASA,GACf,kBAAC,GAAD,MACC+F,EAAMqB,iBACL,6BACGgJ,GAAOvK,KAAI,SAACuM,GACX,OAAO,kBAAC,IAAD,eAAO9F,IAAK8F,EAAM/B,MAAU+B,QAIzC,kBAAC,GAAD,UCnDcC,QACW,cAA7BtS,OAAOK,SAASkS,UAEe,UAA7BvS,OAAOK,SAASkS,UAEhBvS,OAAOK,SAASkS,SAASC,MACvB,2D,sBCjBAC,GAAe,CACnBZ,WAAW,EACXa,aAAc,KACdxJ,YAAa,KACb7B,iBAAiB,EACjBlB,YAAa,KACbiB,OAAQ,MA2BKuL,IChCAC,GDQf,WAAuE,IAAjD1L,EAAgD,uDAAxCuL,GAAc9R,EAA0B,uCACpE,OAAQA,EAAOtB,MACb,KAAKH,EAAMI,mBACT,OAAO+B,OAAOC,OAAO,GAAI4F,EAAO,CAC9B2K,WAAW,IAEf,KAAK3S,EAAMO,mBACT,OAAO4B,OAAOC,OAAO,GAAI4F,EAAO,CAC9B2K,WAAW,EACXzK,OAAQzG,EAAOjB,QAAQyR,YACvB9J,gBAAiB1G,EAAOjB,QAAQ2H,gBAChC6B,YAAavI,EAAOjB,QAAQwJ,YAC5B/C,YAAaxF,EAAOjB,QAAQyG,cAEhC,KAAKjH,EAAMW,iBACT,OAAOwB,OAAOC,OAAO,GAAI4F,EAAO,CAC9B2K,WAAW,EACXa,aAAc/R,EAAOf,QAEzB,QACE,OAAOsH,I,SE5BPuL,GAAe,CACnBnL,YAAY,EACZ0E,WAAW,EACXsC,YAAY,EACZoE,aAAc,KACd3E,UAAW,EACXpL,SAAU,IAAIkQ,KAuIDC,IC9IAF,GDUf,WAA8D,IAApC1L,EAAmC,uDAA3BuL,GAAc9R,EAAa,uCAC3D,OAAQA,EAAOtB,MACb,KAAKH,EAAM8O,kBACT,OAAO3M,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,IAEhB,KAAKpI,EAAM+O,kBACT,IAD4B,EACxB8E,EAAc,IAAIF,IAAI3L,EAAMvE,UADJ,cAEPhC,EAAOjB,QAAQmO,WAFR,IAE5B,2BAA+C,CAAC,IAArCmF,EAAoC,QAC7CD,EAAYE,IAAID,EAAOzQ,GAAIyQ,IAHD,8BAK5B,OAAO3R,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,EACZ3E,SAAUoQ,EACVjF,YAAanN,EAAOjB,QAAQwT,UAC5BC,cAAexS,EAAOjB,QAAQ0T,gBAC9BC,YAAa1S,EAAOsB,WACpB8L,UAAW7G,EAAM6G,UAAY,IAGjC,KAAK7O,EAAMgP,kBACT,OAAO7M,OAAOC,OAAO,GAAI4F,EAAO,CAC9BwL,aAAc/R,EAAOf,MACrB0H,YAAY,IAEhB,KAAKpI,EAAMkQ,iBACT,OAAO/N,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,IAEhB,KAAKpI,EAAMmQ,iBACT,IAAI0D,EAAc,IAAIF,IAAI3L,EAAMvE,UAEhC,OADAoQ,EAAYE,IAAItS,EAAOjB,QAAQyJ,SAAS5G,GAAI5B,EAAOjB,QAAQyJ,UACpD9H,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,EACZ3E,SAAUoQ,EACVM,YAAa1S,EAAOsB,aAGxB,KAAK/C,EAAMoQ,iBACT,OAAOjO,OAAOC,OAAO,GAAI4F,EAAO,CAC9BwL,aAAc/R,EAAOf,MACrB0H,YAAY,IAEhB,KAAKpI,EAAM4J,iBACT,OAAOzH,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,IAEhB,KAAKpI,EAAM6J,iBACT,IAAMgK,EAAc,IAAIF,IAAI3L,EAAMvE,UAElC,OADAoQ,EAAYO,OAAO3S,EAAOjB,QAAQ6T,QAC3BlS,OAAOC,OAAO,GAAI4F,EAAO,CAC9BvE,SAAUoQ,EACVzL,YAAY,IAGhB,KAAKpI,EAAM8J,iBACT,OAAO3H,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,EACZoL,aAAc/R,EAAOf,QAGzB,KAAKV,EAAM+N,eACT,OAAO5L,OAAOC,OAAO,GAAI4F,EAAO,CAC9B8E,WAAW,IAEf,KAAK9M,EAAMgO,eACT,IAAM6F,EAAc,IAAIF,IAAJ,CAClB,CAAClS,EAAOjB,QAAQ8T,QAAQjR,GAAI5B,EAAOjB,QAAQ8T,UADzB,oBAEftM,EAAMvE,YAEX,OAAOtB,OAAOC,OAAO,GAAI4F,EAAO,CAC9B8E,WAAW,EACXrJ,SAAUoQ,IAGd,KAAK7T,EAAMiO,eACT,OAAO9L,OAAOC,OAAO,GAAI4F,EAAO,CAC9B8E,WAAW,EACX0G,aAAc/R,EAAOf,QAEzB,KAAKV,EAAMgM,aACT,OAAO7J,OAAOC,OAAO,GAAI4F,EAAO,CAC9BoH,YAAY,IAEhB,KAAKpP,EAAMiM,aACT,IAAM4H,EAAc,IAAIF,IAAI3L,EAAMvE,UAElC,OADAoQ,EAAYE,IAAItS,EAAOjB,QAAQ+T,QAAQlR,GAAI5B,EAAOjB,QAAQ+T,SACnDpS,OAAOC,OAAO,GAAI4F,EAAO,CAC9BoH,YAAY,EACZ3L,SAAUoQ,IAGd,KAAK7T,EAAMkM,aACT,OAAO/J,OAAOC,OAAO,GAAI4F,EAAO,CAC9BoH,YAAY,EACZoE,aAAc/R,EAAOf,QAKzB,KAAK8T,EAAajI,iBAChB,IAAMsH,EAAc,IAAIF,IAAI3L,EAAMvE,UAC5BwG,EAAW4J,EAAYnQ,IAAIjC,EAAOjB,QAAQqL,aAQhD,OANA5B,EAASjG,QAAUiG,EAASjG,QAAQyQ,QAClC,SAACpR,GAAD,OAAQA,IAAO5B,EAAOjB,QAAQ6T,UAE5BpK,EAASyF,cAAgBjO,EAAOjB,QAAQ6T,SAC1CpK,EAASyF,YAAc,MAElBvN,OAAOC,OAAO,CACnBqB,SAAUoQ,IAId,KAAKW,EAAa7H,eAChB,IAAMkH,EAAc,IAAIF,IAAI3L,EAAMvE,UAC5BwG,EAAW4J,EAAYnQ,IAC3BjC,EAAOjB,QAAQ8T,QAAQzI,aAIzB,OADA5B,EAASjG,QAAQwM,QAAQ/O,EAAOjB,QAAQ8T,QAAQjR,IACzClB,OAAOC,OAAO,CACnBqB,SAAUoQ,IAId,QACE,OAAO7L,IE1IPuL,GAAe,CACnBnL,YAAY,EACZoL,aAAc,KACd/P,SAAU,IAAIkQ,KA4BDe,IC/BAhB,GDMf,WAA0D,IAApC1L,EAAmC,uDAA3BuL,GAAc9R,EAAa,uCACvD,OAAQA,EAAOtB,MACb,KAAKH,EAAM2D,aACT,OAAOxB,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,IAEhB,KAAKpI,EAAM4D,aACT,IAAIiQ,EAAc,IAAIF,IAAI3L,EAAMvE,UAEhC,OADAoQ,EAAYE,IAAItS,EAAOjB,QAAQ2G,KAAK+C,QAASzI,EAAOjB,QAAQ2G,MACrDhF,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,EACZ3E,SAAUoQ,EACVM,YAAa1S,EAAOsB,aAGxB,KAAK/C,EAAM6D,aACT,OAAO1B,OAAOC,OAAO,GAAI4F,EAAO,CAC9BwL,aAAc/R,EAAOf,MACrB0H,YAAY,IAEhB,QACE,OAAOJ,IE3BPuL,GAAe,CACnBnL,YAAY,EACZ0E,WAAW,EACX0G,aAAc,KACd/P,SAAU,IAAIkQ,KAgEDgB,ICpEAjB,GDOf,WAA4D,IAApC1L,EAAmC,uDAA3BuL,GAAc9R,EAAa,uCACzD,OAAQA,EAAOtB,MACb,KAAKH,EAAMiE,eACT,OAAO9B,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,IAEhB,KAAKpI,EAAMkE,eACT,IAAI2P,EAAc,IAAIF,IAAI3L,EAAMvE,UAEhC,OADAoQ,EAAYE,IAAItS,EAAOjB,QAAQ+K,OAAOlI,GAAI5B,EAAOjB,QAAQ+K,QAClDpJ,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,EACZ3E,SAAUoQ,EACVM,YAAa1S,EAAOsB,aAGxB,KAAK/C,EAAMmE,eACT,OAAOhC,OAAOC,OAAO,GAAI4F,EAAO,CAC9BwL,aAAc/R,EAAOf,MACrB0H,YAAY,IAEhB,KAAKpI,EAAMsM,iBACT,OAAOnK,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,IAEhB,KAAKpI,EAAMuM,iBACT,IAAMsH,EAAc,IAAIF,IAAI3L,EAAMvE,UAElC,OADAoQ,EAAYO,OAAO3S,EAAOjB,QAAQ6T,QAC3BlS,OAAOC,OAAO,GAAI4F,EAAO,CAC9BvE,SAAUoQ,EACVzL,YAAY,IAGhB,KAAKpI,EAAM4U,iBACT,OAAOzS,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,EACZoL,aAAc/R,EAAOf,QAEzB,KAAKV,EAAM0M,eACT,OAAOvK,OAAOC,OAAO,GAAI4F,EAAO,CAC9B8E,WAAW,IAEf,KAAK9M,EAAM2M,eACT,IAAMkH,EAAc,IAAIF,IAAJ,CAClB,CAAClS,EAAOjB,QAAQ8T,QAAQjR,GAAI5B,EAAOjB,QAAQ8T,UADzB,oBAEftM,EAAMvE,YAEX,OAAOtB,OAAOC,OAAO,GAAI4F,EAAO,CAC9B8E,WAAW,EACXrJ,SAAUoQ,IAGd,KAAK7T,EAAM4M,eACT,OAAOzK,OAAOC,OAAO,GAAI4F,EAAO,CAC9B8E,WAAW,EACX0G,aAAc/R,EAAOf,QAEzB,QACE,OAAOsH,IEhEPuL,GAAe,CACnBnL,YAAY,EACZoL,aAAc,KACdtC,WAAY,KACZrC,UAAW,EACXpL,SAAU,IAAIkQ,KAwCDkB,IC7CAnB,GDQf,WAA2D,IAApC1L,EAAmC,uDAA3BuL,GAAc9R,EAAa,uCACxD,OAAQA,EAAOtB,MACb,KAAKH,GAAM8Q,eACT,OAAO3O,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,IAEhB,KAAKpI,GAAM+Q,eACT,IAAI8C,EAGFA,EADE7L,EAAMkJ,YAAclJ,EAAMkJ,aAAezP,EAAOjB,QAAQsU,YAC5C,IAAInB,IAEJ,IAAIA,IAAI3L,EAAMvE,UANL,oBAQJhC,EAAOjB,QAAQmO,WARX,IAQzB,2BAA+C,CAAC,IAArCmF,EAAoC,QAC7CD,EAAYE,IAAID,EAAOzQ,GAAIyQ,IATJ,8BAWzB,OAAO3R,OAAOC,OAAO,GAAI4F,EAAO,CAC9BI,YAAY,EACZ3E,SAAUoQ,EACVjF,YAAanN,EAAOjB,QAAQwT,UAC5BC,cAAexS,EAAOjB,QAAQ0T,gBAC9BC,YAAa1S,EAAOsB,WACpB8L,UAAW7G,EAAM6G,UAAY,EAC7BqC,WAAYzP,EAAOjB,QAAQsU,cAG/B,KAAK9U,GAAMgR,eACT,OAAO7O,OAAOC,OAAO,GAAI4F,EAAO,CAC9BwL,aAAc/R,EAAOf,MACrB0H,YAAY,IAEhB,QACE,OAAOJ,IEzBE+M,GATDC,aACZC,aAAgBC,GAChBC,aACE5T,EACA6T,OCJJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeR,MAAOA,IACpB,kBAAC,GAAD,QAGJ9T,SAASuU,eAAe,SZ0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpT,MAAK,SAACqT,GACLA,EAAaC,gBAEd3S,OAAM,SAACxC,GACNoV,QAAQpV,MAAMA,EAAMyC,c","file":"static/js/main.4c174e6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down-arrow.a5a584e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.ab947aeb.svg\";","module.exports = __webpack_public_path__ + \"static/media/alert.4bb2ea72.svg\";","module.exports = __webpack_public_path__ + \"static/media/question-mark.f9e1c18a.svg\";","import { Auth0Client } from \"@auth0/auth0-spa-js\";\n\nexport enum Types {\n  INIT_AUTH0_REQUEST = \"INIT_AUTH0_REQUEST\",\n  INIT_AUTH0_SUCCESS = \"INIT_AUTH0_SUCCESS\",\n  INIT_AUTH0_ERROR = \"INIT_AUTH0_ERROR\",\n}\n\ninterface requestInitAuth0Action {\n  type: typeof Types.INIT_AUTH0_REQUEST;\n}\n\nexport interface SuccessPayload {\n  auth0Client: Auth0Client;\n  isAuthenticated: boolean;\n  accessToken: string;\n  currentUser: string; // current user id\n}\ninterface successAuth0Action {\n  type: typeof Types.INIT_AUTH0_SUCCESS;\n  payload: SuccessPayload;\n}\n\ninterface initAuth0ErrorAction {\n  type: typeof Types.INIT_AUTH0_ERROR;\n  error: string;\n}\n\nexport type Auth0ActionTypes =\n  | requestInitAuth0Action\n  | successAuth0Action\n  | initAuth0ErrorAction;\n\nexport default Types;\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import Types, { Auth0ActionTypes, SuccessPayload } from \"./types\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nfunction requestInitAuth0(): Auth0ActionTypes {\n  return {\n    type: Types.INIT_AUTH0_REQUEST,\n  };\n}\n\nfunction initAuth0Success(successPayload: SuccessPayload): Auth0ActionTypes {\n  return {\n    type: Types.INIT_AUTH0_SUCCESS,\n    payload: successPayload,\n  };\n}\n\nfunction initAuth0Error(error: string): Auth0ActionTypes {\n  return {\n    type: Types.INIT_AUTH0_ERROR,\n    error,\n  };\n}\n\n// async action\n\ninterface InitOptions {\n  domain: string;\n  client_id: string;\n  audience: string;\n  redirect_uri: string;\n  useRefreshToken: boolean;\n}\nfunction defaultHandleRedirect(appState?: any) {\n  window.history.replaceState({}, document.title, window.location.pathname);\n}\n\nexport function initAuth0(\n  initOptions: InitOptions,\n  handleRedirect = defaultHandleRedirect\n) {\n  return function (dispatch: any) {\n    dispatch(requestInitAuth0());\n    createAuth0Client(initOptions)\n      .then(async (auth0Client) => {\n        // handle authentication from the url\n        if (\n          window.location.search.includes(\"code=\") &&\n          window.location.search.includes(\"state=\")\n        ) {\n          const appState = await auth0Client.handleRedirectCallback();\n          handleRedirect(appState);\n        }\n        const isAuthenticated = await auth0Client.isAuthenticated();\n        let accessToken = null,\n          currentUser = null;\n        if (isAuthenticated) {\n          accessToken = await auth0Client.getTokenSilently();\n          // get current user id from json web token\n          currentUser = JSON.parse(atob(accessToken.split(\".\")[1])).sub;\n        }\n        dispatch(\n          initAuth0Success({\n            auth0Client,\n            isAuthenticated,\n            accessToken,\n            currentUser,\n          })\n        );\n      })\n      .catch((err) => {\n        dispatch(initAuth0Error(err.message));\n      });\n  };\n}\n","export enum Types {\n  USER_REQUEST = \"USER_REQUEST\",\n  USER_SUCCESS = \"USER_SUCCESS\",\n  USER_FAILURE = \"USER_FAILURE\",\n}\n\nexport interface User {\n  user_id: string;\n  name: string; // given name by auth0\n  picture: string;\n  user_metadata?: {\n    firstname: string;\n    lastname: string;\n    job: string;\n  };\n}\n","const baseUrl = \"\";\n\nfunction callApi(endpoint: string, config: any, token?: string) {\n  if (token) {\n    // if there is headers in config, don't override it\n    if (config.headers) {\n      Object.assign(config.headers, {\n        Authorization: `Bearer ${token}`,\n      });\n    } else {\n      Object.assign(config, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    }\n  }\n\n  return fetch(baseUrl + endpoint, config)\n    .then((response) => {\n      return response.json().then((data) => ({ data, response }));\n    })\n    .then(({ data, response }) => {\n      if (!response.ok) {\n        return Promise.reject(data);\n      }\n\n      return data;\n    });\n}\n\nexport const CALL_API = Symbol(\"Call API\");\nconst apiService = () => (next: any) => (action: any) => {\n  const call = action[CALL_API];\n\n  // So the middleware doesn't get applied to every single action\n  if (typeof call === \"undefined\") {\n    return next(action);\n  }\n\n  let { endpoint, token, types, config = {} } = call;\n  const [requestType, successType, errorType] = types;\n  // dispatching the request\n  next({\n    type: requestType,\n  });\n\n  return callApi(endpoint, config, token)\n    .then((response) => {\n      return next({\n        receivedAt: Date.now(),\n        payload: response,\n        type: successType,\n      });\n    })\n    .catch((error) => {\n      return next({\n        error: error.message,\n        type: errorType,\n      });\n    });\n};\n\nexport default apiService;\n","import { Types } from \"./types\";\nimport { CALL_API } from \"../../middlewares/apiService\";\n\nfunction fetchUser(id: string) {\n  return {\n    [CALL_API]: {\n      endpoint: `/api/users/${id}`,\n      types: [Types.USER_REQUEST, Types.USER_SUCCESS, Types.USER_FAILURE],\n    },\n  };\n}\n\nexport function loadUser(id: string) {\n  return function (dispatch: any, getState: any) {\n    const user = getState().users.entities.get(id);\n    // do not send pointless requests\n    if (user || !id) {\n      return null;\n    }\n    return dispatch(fetchUser(id));\n  };\n}\n","export enum Types {\n  QUESTIONS_REQUEST = \"QUESTIONS_REQUEST\",\n  QUESTIONS_SUCCESS = \"QUESTIONS_SUCCESS\",\n  QUESTIONS_FAILURE = \"QUESTIONS_FAILURE\",\n  QUESTION_REQUEST = \"QUESTION_REQUEST\",\n  QUESTION_SUCCESS = \"QUESTION_SUCCESS\",\n  QUESTION_FAILURE = \"QUESTION_FAILURE\",\n  Q_DELETE_REQUEST = \"Q_DELETE_REQUEST\",\n  Q_DELETE_SUCCESS = \"Q_DELETE_SUCCESS\",\n  Q_DELETE_FAILURE = \"Q_DELETE_FAILURE\",\n  Q_POST_REQUEST = \"Q_POST_REQUEST\",\n  Q_POST_SUCCESS = \"Q_POST_SUCCESS\",\n  Q_POST_FAILURE = \"Q_POST_FAILURE\",\n  Q_BA_REQUEST = \"Q_BA_REQUEST\", // question best answer\n  Q_BA_SUCCESS = \"Q_BA_SUCCESS\",\n  Q_BA_FAILURE = \"Q_BA_FAILURE\",\n}\n\nexport interface Question {\n  id: number;\n  user_id: string;\n  content: string;\n  created_at: string;\n  best_answer: number | null;\n  answers: number[];\n}\n","export enum Types {\n  ANSWER_REQUEST = \"ANSWER_REQUEST\",\n  ANSWER_SUCCESS = \"ANSWER_SUCCESS\",\n  ANSWER_FAILURE = \"ANSWER_FAILURE\",\n  A_DELETE_REQUEST = \"A_DELETE_REQUEST\",\n  A_DELETE_SUCCESS = \"A_DELETE_SUCCESS\",\n  A_DELETE_FAILURE = \"A_DELETE_FAILURE\",\n  A_POST_REQUEST = \"A_POST_REQUEST\",\n  A_POST_SUCCESS = \"A_POST_SUCCESS\",\n  A_POST_FAILURE = \"A_POST_FAILURE\",\n}\n\nexport interface Answer {\n  id: number;\n  user_id: string;\n  content: string;\n  created_at: string;\n  question_id: number;\n}\n","import { Types } from \"./types\";\nimport { CALL_API } from \"../../middlewares/apiService\";\n\nfunction fetchAnswer(id: string) {\n  return {\n    [CALL_API]: {\n      endpoint: `/api/answers/${id}`,\n      types: [Types.ANSWER_REQUEST, Types.ANSWER_SUCCESS, Types.ANSWER_FAILURE],\n    },\n  };\n}\n\nexport function loadAnswer(id: string) {\n  return function (dispatch: any, getState: any) {\n    const answer = getState().answers.entities.get(id);\n    // do not send pointless requests\n    if (answer || !id) {\n      return null;\n    }\n    return dispatch(fetchAnswer(id));\n  };\n}\n\nexport function deleteAnswer(id: string, token: string) {\n  return {\n    [CALL_API]: {\n      endpoint: `/api/answers/${id}`,\n      token: token,\n      types: [\n        Types.A_DELETE_REQUEST,\n        Types.A_DELETE_SUCCESS,\n        Types.ANSWER_FAILURE,\n      ],\n      config: {\n        method: \"DELETE\",\n      },\n    },\n  };\n}\n\nexport function postAnswer(questionId: number, content: string, token: string) {\n  return {\n    [CALL_API]: {\n      endpoint: `/api/questions/${questionId}/answers`,\n      token: token,\n      types: [Types.A_POST_REQUEST, Types.A_POST_SUCCESS, Types.A_POST_FAILURE],\n      config: {\n        method: \"POST\",\n        body: JSON.stringify({ content }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      },\n    },\n  };\n}\n","import React, { FunctionComponent } from \"react\";\n\ninterface Props {\n  src: string;\n  size?: string;\n  info?: {\n    name: string;\n    role?: string;\n  };\n}\n\nconst Avatar: FunctionComponent<Props> = ({ src, size, info }) => {\n  return (\n    <div className={`avatar-${size}`}>\n      <div className=\"avatar-img\">\n        <img src={src} alt={info ? info.name + \" image\" : \"avatar image\"} />\n      </div>\n      {info && (\n        <p className=\"avatar-info\">\n          {info.name}\n          {info.role && (\n            <>\n              <br />\n              <small className=\"text-muted\">{info.role}</small>\n            </>\n          )}\n        </p>\n      )}\n    </div>\n  );\n};\nAvatar.defaultProps = {\n  size: \"md\",\n};\n\nexport default Avatar;\n","import React, {\n  FunctionComponent,\n  ReactNode,\n  Children,\n  cloneElement,\n  useState,\n  useRef,\n  useEffect,\n  Dispatch,\n  SetStateAction,\n} from \"react\";\n\ninterface Props {\n  btnContent: ReactNode;\n  dropdownClass?: string;\n  btnClass?: string;\n  useDropdown?: [boolean, Dispatch<SetStateAction<boolean>>],\n}\n\nconst Dropdown: FunctionComponent<Props> = ({\n  btnContent,\n  dropdownClass,\n  btnClass,\n  children,\n  useDropdown\n}) => {\n\n  let [active, setActive] = useState<boolean>(false)\n  if (useDropdown) {\n    // this is just to give the parent component an optional way\n    // to access Dropdown component state (renderProps and similar is not optional)\n    [active, setActive] = useDropdown;\n  }\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    function handleEscape(evt: KeyboardEvent) {\n      evt.stopPropagation();\n      const esc_key_code = 27;\n      if (evt.keyCode === esc_key_code) {\n        hide();\n      }\n    }\n\n    function handleDocumentClick(evt: MouseEvent) {\n      evt.stopPropagation();\n      const clicked = evt.target as any;\n      // if the user click the dropdown or any of its children, do not hide the dropdown\n      if (\n        clicked === dropdownRef.current ||\n        dropdownRef.current?.contains(clicked)\n      ) {\n        return;\n      }\n      // else hide it\n      hide();\n    }\n    document.addEventListener(\"click\", handleDocumentClick, false);\n    document.addEventListener(\"keydown\", handleEscape, false);\n\n    // cleanup function\n    return function () {\n      document.removeEventListener(\"click\", handleDocumentClick, false);\n      document.removeEventListener(\"keydown\", handleEscape, false);\n    };\n  }, []);\n\n  function toggleMenu(evt: React.MouseEvent<HTMLButtonElement>) {\n    if (active) {\n      hide();\n    } else {\n      show();\n    }\n  }\n\n  function hide() {\n    setActive(false);\n  }\n\n  function show() {\n    setActive(true);\n  }\n\n  return (\n    <div ref={dropdownRef} className={dropdownClass ? dropdownClass + \" dropdown\" : \"dropdown\"}>\n      <button\n        className={btnClass ? btnClass + \" btn\" : \"btn\"}\n        aria-haspopup=\"true\"\n        aria-expanded={active}\n        onClick={toggleMenu}\n      >\n        {btnContent}\n      </button>\n\n      <div\n        className={active ? \"dropdown-menu show\" : \"dropdown-menu\"}\n        aria-labelledby=\"dropdownMenuLink\"\n      >\n        {Children.map(children, (child: any) => {\n          if (!child || !child.props) {\n            return // not a react element\n          }\n          return cloneElement(child, {\n            className: child.props.className\n              ? child.props.className + \" dropdown-item\"\n              : \"dropdown-item\",\n          });\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Dropdown;\n","import React, { useState, FormEvent } from \"react\";\nimport logo from \"../../images/logo.svg\";\nimport alert from \"../../images/icons/alert.svg\";\nimport questionMark from \"../../images/icons/question-mark.svg\";\nimport Avatar from \"./avatar\";\nimport Dropdown from \"./dropdown\";\nimport { connect } from \"react-redux\";\nimport { Auth0Client } from \"@auth0/auth0-spa-js\";\nimport { User } from \"../../state/ducks/users/types\";\nimport { Link, useHistory } from \"react-router-dom\";\n\ninterface NavProps {\n  user: User | null;\n  logout: () => void;\n  goToProfile: () => void;\n}\nfunction Nav(props: NavProps) {\n  function handleAlertClick() {\n    window.alert(\"Alerts not implemented yet, Stay tuned!\");\n  }\n  let currentUser,\n    userName = \"loading...\";\n  if (props.user) {\n    currentUser = props.user;\n    userName = currentUser.user_metadata\n      ? currentUser.user_metadata.firstname +\n        \" \" +\n        currentUser.user_metadata.lastname\n      : currentUser.name;\n  }\n  return (\n    <ul className=\"navbar-nav\">\n      <li className=\"nav-item\">\n        <button className=\"nav-btn btn\" onClick={handleAlertClick}>\n          <img src={alert} alt=\"alert-icon\" className=\"icon\" />\n        </button>\n      </li>\n      <li className=\"nav-item\">\n        <button className=\"nav-btn btn\">\n          <img src={questionMark} alt=\"question-mark-icon\" className=\"icon\" />\n        </button>\n      </li>\n      <li className=\"nav-item\" style={{ marginRight: \"-7px\" }}>\n        <Dropdown\n          btnContent={<Avatar src={currentUser?.picture || \"\"} size=\"sm\" />}\n          btnClass=\"avatar-btn\"\n        >\n          <button\n            onClick={props.goToProfile}\n            style={{ textTransform: \"capitalize\" }}\n          >\n            {userName}\n          </button>\n          <button onClick={props.logout}>Logout</button>\n        </Dropdown>\n      </li>\n    </ul>\n  );\n}\n\ninterface Props {\n  auth0: Auth0Client;\n  isAuthenticated: boolean;\n  currentUser: string;\n  isFetching: boolean;\n  users: Map<string, User>;\n}\nfunction Navbar(props: Props) {\n  const history = useHistory();\n  const [inputVal, setInputVal] = useState<string>(\"\");\n  function login() {\n    props.auth0.loginWithRedirect({});\n  }\n\n  function logout() {\n    props.auth0.logout({ returnTo: window.location.origin });\n  }\n\n  function goToProfile() {\n    window.alert(\"Users profile page is not here yet, Stay tuned!\");\n  }\n\n  function handleSearch(evt: any) {\n    evt.preventDefault();\n    if (!inputVal) {\n      return null;\n    }\n    history.push(`/search?term=${inputVal}`);\n  }\n\n  function handleChange(evt: FormEvent<HTMLInputElement>) {\n    setInputVal(evt.currentTarget.value);\n  }\n\n  return (\n    <nav className=\"navbar navbar-primary navbar-dark\">\n      <Link to=\"/\" className=\"navbar-brand logo\">\n        <img\n          className=\"logo-img\"\n          src={logo}\n          width=\"30\"\n          height=\"30\"\n          alt=\"sal logo\"\n          loading=\"lazy\"\n        />\n        <span className=\"logo-slogan\">any question...</span>\n      </Link>\n      <form className=\"form-inline navbar-search\" onSubmit={handleSearch}>\n        <input\n          className=\"form-control mr-sm-2\"\n          type=\"search\"\n          placeholder=\"Search\"\n          aria-label=\"Search\"\n          value={inputVal}\n          onChange={handleChange}\n        />\n      </form>\n      {!props.isAuthenticated && (\n        <button\n          className=\"btn btn-link-light\"\n          onClick={login}\n          style={{\n            paddingRight: \"10px\",\n            paddingLeft: \"10px\",\n            marginRight: \"-10px\",\n          }}\n        >\n          Sign In\n        </button>\n      )}\n      {props.isAuthenticated && (\n        <Nav\n          user={props.users.get(props.currentUser) || null}\n          logout={logout}\n          goToProfile={goToProfile}\n        />\n      )}\n    </nav>\n  );\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    auth0: state.auth0.client,\n    isAuthenticated: state.auth0.isAuthenticated,\n    currentUser: state.auth0.currentUser,\n    isFetching: state.users.isFetching,\n    users: state.users.entities,\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\n","import React, { CSSProperties } from \"react\";\nimport Avatar from \"./avatar\";\nimport downArrow from \"../../images/icons/down-arrow.svg\";\nimport Dropdown from \"./dropdown\";\nimport { Link } from \"react-router-dom\";\nimport { Question } from \"../../state/ducks/questions/types\";\nimport { deleteQuestion } from \"../../state/ducks/questions/actions\";\nimport { User } from \"../../state/ducks/users/types\";\nimport { connect } from \"react-redux\";\n\ninterface Props {\n  question: Question;\n  users: Map<string, User>;\n  currentUser: string;\n  token: string;\n  deleteQuestion: any;\n  style?: CSSProperties;\n}\nfunction QuestionSection(props: Props) {\n  let user = props.users.get(props.question.user_id);\n  let job = \"loading...\",\n    userName = \"loading...\";\n  if (user) {\n    userName = user.user_metadata\n      ? user.user_metadata.firstname + \" \" + user.user_metadata.lastname\n      : user.name;\n    job = user.user_metadata ? user.user_metadata.job : \"software engineer\"; // you've signed in using github :)\n  }\n  const currentUserQuestion = props.currentUser === props.question.user_id;\n  function handleReporting() {\n    alert(\"Unfortunately, this action is not implemented yet!\");\n  }\n  function handleUpdating() {\n    alert(\"Unfortunately, this action is not implemented yet!\");\n  }\n  function handleDeleting() {\n    props.deleteQuestion(props.question.id, props.token);\n  }\n  const createdAt = new Date(props.question.created_at);\n  return (\n    <div className=\"card ask\" style={props.style}>\n      <div className=\"card-header\">\n        <Avatar\n          src={user?.picture || \"\"}\n          info={{ name: userName, role: job }}\n        />\n        <div className=\"card-header-metadata\">\n          <p className=\"content\">\n            <small>\n              {createdAt.toLocaleDateString()}\n              <br />\n              <span className=\"text-muted\">\n                {!props.question.answers.length\n                  ? \"No answers yet\"\n                  : props.question.answers.length === 1\n                  ? \"1 answer\"\n                  : `${props.question.answers.length} answers`}\n              </span>\n            </small>\n          </p>\n          <Dropdown\n            btnContent={\n              <img className=\"icon\" src={downArrow} alt=\"down-arrow icon\" />\n            }\n          >\n            <Link to={`/questions/${props.question.id}`}>View question</Link>\n            {!currentUserQuestion && (\n              <button onClick={handleReporting}>Report this question</button>\n            )}\n            {currentUserQuestion && (\n              <button onClick={handleDeleting}>Delete Question</button>\n            )}\n            {currentUserQuestion && (\n              <button onClick={handleUpdating}>Update Question</button>\n            )}\n          </Dropdown>\n        </div>\n      </div>\n      <div className=\"card-body\">\n        <p className=\"card-text\">{props.question.content}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    token: state.auth0.accessToken,\n    currentUser: state.auth0.currentUser,\n    users: state.users.entities,\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteQuestion,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionSection);\n","import { Types } from \"./types\";\nimport { CALL_API } from \"../../middlewares/apiService\";\n\n// load questions by page\nfunction fetchQuestions(nextPageUrl: string) {\n  return {\n    [CALL_API]: {\n      endpoint: nextPageUrl,\n      types: [\n        Types.QUESTIONS_REQUEST,\n        Types.QUESTIONS_SUCCESS,\n        Types.QUESTIONS_FAILURE,\n      ],\n    },\n  };\n}\n\nexport function loadQuestions() {\n  return function (dispatch: any, getState: any) {\n    const { nextPageUrl = \"/api/questions\", pageCount = 0 } =\n      getState().questions || {};\n    // don't make pointless requests\n    if (pageCount > 0 && !nextPageUrl) {\n      return;\n    }\n    return dispatch(fetchQuestions(nextPageUrl));\n  };\n}\n\n// load only one question\nfunction fetchQuestion(id: string) {\n  return {\n    [CALL_API]: {\n      endpoint: `/api/questions/${id}`,\n      types: [\n        Types.QUESTION_REQUEST,\n        Types.QUESTION_SUCCESS,\n        Types.QUESTION_FAILURE,\n      ],\n    },\n  };\n}\n\nexport function loadQuestion(id: string) {\n  return function (dispatch: any, getState: any) {\n    const answer = getState().questions.entities.get(id);\n    // do not send pointless requests\n    if (answer || !id) {\n      return null;\n    }\n    return dispatch(fetchQuestion(id));\n  };\n}\n\nexport function deleteQuestion(id: number, token: string) {\n  if (!id) {\n    // don't send pointless requests\n    return null;\n  }\n  return {\n    [CALL_API]: {\n      endpoint: `/api/questions/${id}`,\n      token: token,\n      types: [\n        Types.Q_DELETE_REQUEST,\n        Types.Q_DELETE_SUCCESS,\n        Types.Q_DELETE_FAILURE,\n      ],\n      config: {\n        method: \"DELETE\",\n      },\n    },\n  };\n}\n\nexport function postQuestion(content: string, token: string) {\n  return {\n    [CALL_API]: {\n      endpoint: \"/api/questions\",\n      token: token,\n      types: [Types.Q_POST_REQUEST, Types.Q_POST_SUCCESS, Types.Q_POST_FAILURE],\n      config: {\n        method: \"POST\",\n        body: JSON.stringify({ content }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      },\n    },\n  };\n}\n\nexport function selectBestAnswer(\n  question_id: number,\n  answer_id: number,\n  token: string\n) {\n  return {\n    [CALL_API]: {\n      endpoint: `/api/questions/${question_id}`,\n      token: token,\n      types: [Types.Q_BA_REQUEST, Types.Q_BA_SUCCESS, Types.Q_BA_FAILURE],\n      config: {\n        method: \"PATCH\",\n        body: JSON.stringify({ answer: answer_id }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      },\n    },\n  };\n}\n","import React from 'react';\n\ninterface Props {\n  className: string\n}\n\nfunction Spinner({ className }: Props) {\n  return (\n    <div className={className}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 60 60\"\n        aria-labelledby=\"spinner-title\"\n        role=\"graphic\"\n        className=\"spinner\"\n      >\n        <title id=\"spinner-title\">Loading...</title>\n        <circle className=\"spinner-circle\" cx=\"30\" cy=\"30\" r=\"24\"></circle>\n        <circle className=\"spinner-semi-circle\" cx=\"30\" cy=\"30\" r=\"24\"></circle>\n      </svg>\n    </div>\n  )\n}\n\nexport default Spinner;\n","import React, { useState, FormEvent, useEffect, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport Avatar from \"./avatar\";\nimport downArrow from \"../../images/icons/down-arrow.svg\";\nimport Dropdown from \"./dropdown\";\nimport Spinner from \"./spinner\";\nimport { selectBestAnswer } from \"../../state/ducks/questions/actions\";\nimport { deleteAnswer, postAnswer } from \"../../state/ducks/answers/actions\";\nimport { Answer } from \"../../state/ducks/answers/types\";\nimport { User } from \"../../state/ducks/users/types\";\n\ninterface AnswerProps {\n  answer: Answer;\n  users: Map<string, User>;\n  currentUser: string;\n  bestAnswer: number | null;\n  questionUserId: string;\n  selectBestAnswer: any;\n  deleteAnswer: any;\n  token: string;\n  isUpdatingQuestion: boolean;\n}\nfunction AnswerContent(props: AnswerProps) {\n  // handle showing the loading logic in the way below\n  // is just to only show the loading behavior in only one instance\n  const [requestBASent, setRequestBASent] = useState<boolean>(false);\n  useEffect(() => {\n    if (!props.isUpdatingQuestion) {\n      setRequestBASent(false);\n    }\n  }, [props.isUpdatingQuestion]);\n  const [showDropdown, setShowDropdown] = useState<boolean>(false);\n  function handleReporting() {\n    alert(\"Unfortunately, this action is not implemented yet!\");\n  }\n  function handleUpdating() {\n    alert(\"Unfortunately, this action is not implemented yet!\");\n  }\n  function handleBestAnswer() {\n    props.selectBestAnswer(\n      props.answer.question_id,\n      props.answer.id,\n      props.token\n    );\n    setRequestBASent(true);\n    setShowDropdown(false);\n  }\n  function handleDelete() {\n    props.deleteAnswer(props.answer.id, props.token);\n  }\n  let user = props.users.get(props.answer.user_id);\n  let job = \"loading...\",\n    userName = \"loading...\";\n  if (user) {\n    userName = user.user_metadata\n      ? user.user_metadata.firstname + \" \" + user.user_metadata.lastname\n      : user.name;\n    job = user.user_metadata ? user.user_metadata.job : \"software engineer\";\n    // you've signed in using github :)\n  }\n  const currentUserAnswer = props.currentUser === props.answer.user_id;\n  const currentUserQuestion = props.currentUser === props.questionUserId;\n  const createdAt = new Date(props.answer.created_at);\n  const isBestAnswer = props.bestAnswer === props.answer.id;\n  return (\n    <>\n      <div className=\"card-header\">\n        <Avatar\n          src={user?.picture || \"\"}\n          info={{ name: userName, role: job }}\n        />\n        <div className=\"card-header-metadata\">\n          <p className=\"content\">\n            <small>\n              {createdAt.toLocaleDateString()}\n              <br />\n              <span className=\"text-muted\">\n                {requestBASent\n                  ? \"loading...\"\n                  : isBestAnswer\n                  ? \"Accepted by user\"\n                  : \"Most recent\"}\n              </span>\n            </small>\n          </p>\n          <Dropdown\n            useDropdown={[showDropdown, setShowDropdown]}\n            btnContent={\n              <img className=\"icon\" src={downArrow} alt=\"down-arrow icon\" />\n            }\n          >\n            {!currentUserAnswer && (\n              <button onClick={handleReporting}>Report this answer</button>\n            )}\n            {currentUserQuestion && (\n              <button onClick={handleBestAnswer}>Select best answer</button>\n            )}\n            {currentUserAnswer && (\n              <button onClick={handleUpdating}>Update answer</button>\n            )}\n            {currentUserAnswer && (\n              <button onClick={handleDelete}>Delete answer</button>\n            )}\n          </Dropdown>\n        </div>\n      </div>\n      <div className=\"card-body\">\n        <p className=\"card-text\">{props.answer.content}</p>\n      </div>\n    </>\n  );\n}\ninterface Props {\n  users: Map<string, User>;\n  token: string;\n  currentUser: string;\n  bestAnswer: number | null;\n  answerExists: boolean;\n  questionId: number;\n  questionUserId: string;\n  selectBestAnswer: any;\n  deleteAnswer: any;\n  postAnswer: any;\n  isUpdatingQuestion: boolean;\n  isPostingAnswer: boolean;\n  // you must include one of the following properties\n  answer?: Answer | undefined;\n  answers?: (Answer | undefined)[];\n}\nfunction AnswerSection(props: Props) {\n  const [formActive, setFormActive] = useState<boolean>(false);\n  const [textareaVal, setTextareaVal] = useState<string>(\"\");\n  // handle showing the loading logic in the way below\n  // is just to only show the loading behavior in only one instance\n  const [postingAnswer, setPostingAnswer] = useState<boolean>(false);\n  useEffect(() => {\n    if (!props.isPostingAnswer) {\n      setPostingAnswer(false);\n    }\n  }, [props.isPostingAnswer]);\n  function showForm() {\n    setFormActive(true);\n  }\n  function hideForm() {\n    if (textareaVal !== \"\") {\n      const confirm = window.confirm(\"Discard what you have typed?\");\n      if (!confirm) {\n        return;\n      }\n    }\n    setTextareaVal(\"\");\n    setFormActive(false);\n  }\n  function handleSubmit(evt: FormEvent<HTMLFormElement>) {\n    evt.preventDefault();\n    props.postAnswer(props.questionId, textareaVal, props.token);\n    setTextareaVal(\"\");\n    setFormActive(false);\n    setPostingAnswer(true);\n  }\n\n  let answers = null;\n  if (props.answers) {\n    answers = props.answers.map((answer) => {\n      return (\n        <Fragment key={Math.random().toString(16).slice(2)}>\n          <hr />\n          {!answer && (\n            <div className=\"spinner-container\" style={{ height: \"60px\" }}>\n              <Spinner className=\"spinner-sm spinner-centered\" />\n            </div>\n          )}\n          {answer && (\n            <AnswerContent\n              answer={answer}\n              users={props.users}\n              currentUser={props.currentUser}\n              bestAnswer={props.bestAnswer}\n              questionUserId={props.questionUserId}\n              selectBestAnswer={props.selectBestAnswer}\n              token={props.token}\n              deleteAnswer={props.deleteAnswer}\n              isUpdatingQuestion={props.isUpdatingQuestion}\n            />\n          )}\n        </Fragment>\n      );\n    });\n  }\n\n  return (\n    <div className=\"card answer\">\n      {/* in case there is only one answer to include */}\n      {!answers && (\n        <>\n          {((!props.answer && props.answerExists) || postingAnswer) && (\n            <div className=\"spinner-container\" style={{ height: \"60px\" }}>\n              <Spinner className=\"spinner-sm spinner-centered\" />\n            </div>\n          )}\n          {props.answer && (\n            <AnswerContent\n              answer={props.answer}\n              users={props.users}\n              currentUser={props.currentUser}\n              bestAnswer={props.bestAnswer}\n              questionUserId={props.questionUserId}\n              selectBestAnswer={props.selectBestAnswer}\n              token={props.token}\n              deleteAnswer={props.deleteAnswer}\n              isUpdatingQuestion={props.isUpdatingQuestion}\n            />\n          )}\n          {props.answerExists && <hr />}\n        </>\n      )}\n      <div className=\"answer-cta-section\">\n        <button className=\"btn btn-link\" onClick={showForm}>\n          Write an answer\n        </button>\n        {props.answerExists && !answers && (\n          <Link to={`/questions/${props.questionId}`} className=\"btn btn-link\">\n            View all answers\n          </Link>\n        )}\n      </div>\n      {formActive && (\n        <>\n          <hr />\n          <form action=\"\" className=\"answer-form\" onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <textarea\n                name=\"\"\n                id=\"\"\n                rows={3}\n                className=\"form-control\"\n                value={textareaVal}\n                onChange={(evt) => {\n                  setTextareaVal(evt.currentTarget.value);\n                }}\n              />\n            </div>\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={textareaVal === \"\"}\n            >\n              Submit\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              onClick={hideForm}\n            >\n              Cancel\n            </button>\n          </form>\n        </>\n      )}\n      {/* in case there are multiple answers to include */}\n      {answers && (\n        <>\n          {postingAnswer && (\n            <div className=\"spinner-container\" style={{ height: \"60px\" }}>\n              <Spinner className=\"spinner-sm spinner-centered\" />\n            </div>\n          )}\n          {answers}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    token: state.auth0.accessToken,\n    currentUser: state.auth0.currentUser,\n    users: state.users.entities,\n    isPostingAnswer: state.answers.isPosting,\n  };\n}\nconst mapDispatchToProps = {\n  selectBestAnswer,\n  deleteAnswer,\n  postAnswer,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerSection);\n","import React, { useState, FormEvent, CSSProperties } from \"react\";\nimport { connect } from \"react-redux\";\nimport { postQuestion } from \"../../state/ducks/questions/actions\";\nimport { Avatar } from \"../components\";\n\ninterface Props {\n  postQuestion: any;\n  token: string;\n  users: Map<string, any>;\n  currentUser: string;\n  style: CSSProperties\n}\nfunction QuestionFrom(props: Props) {\n  const [formFocused, setFormFocused] = useState<boolean>(false);\n  const [textareaVal, setTextareaVal] = useState<string>(\"\");\n  function handleFocus() {\n    setFormFocused(true);\n  }\n  function handleBlur() {\n    setFormFocused(false);\n  }\n  function handleChange(evt: FormEvent<HTMLTextAreaElement>) {\n    setTextareaVal(evt.currentTarget.value);\n  }\n  function handleCancel() {\n    setTextareaVal(\"\");\n    setFormFocused(false);\n  }\n  function handleSubmit(evt: FormEvent<HTMLFormElement>) {\n    evt.preventDefault();\n    props.postQuestion(textareaVal, props.token);\n    setTextareaVal(\"\");\n    handleBlur();\n  }\n  const currentUser = props.users.get(props.currentUser);\n  return (\n    <>\n      {formFocused && <div className=\"q-form-backdrop\"></div>}\n      <form\n        action=\"\"\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        onSubmit={handleSubmit}\n        className={`question-form ${formFocused ? \"focus\" : \"\"}`}\n        style={props.style}\n      >\n        <div className=\"backdrop\"></div>\n        <div className=\"group\">\n          <Avatar src={currentUser?.picture || \"\"} />\n          <textarea\n            placeholder=\"Sal about anything...\"\n            rows={3}\n            value={textareaVal}\n            onChange={handleChange}\n          />\n        </div>\n        {(formFocused || textareaVal) && (\n          <>\n            <hr />\n            <button\n              type=\"submit\"\n              className=\"btn btn-link\"\n              disabled={textareaVal === \"\"}\n            >\n              Submit\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-link\"\n              onClick={handleCancel}\n            >\n              Cancel\n            </button>\n          </>\n        )}\n      </form>\n    </>\n  );\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    token: state.auth0.accessToken,\n    currentUser: state.auth0.currentUser,\n    users: state.users.entities,\n  };\n}\n\nconst mapDispatchToProps = {\n  postQuestion,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionFrom);\n","import React from 'react';\nimport Navbar from \"./navbar\";\n\nfunction Header() {\n  return (\n    <header className=\"page-header\">\n      <div className=\"container\">\n        <Navbar />\n      </div>\n    </header>\n  )\n}\n\nexport default Header;\n","import React from \"react\";\n\ninterface Props {}\nfunction Footer(props: Props) {\n  return (\n    <footer className=\"page-footer\">\n      <div className=\"container\">\n        <p className=\"copyrights\">\n          Designed & Developed by <a href=\"https://www.linkedin.com/in/ahmedhrayyan/\">Ahmed Hamed</a>\n        </p>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer;\n","import React, { useEffect, ReactNode, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { loadQuestions } from \"../../state/ducks/questions/actions\";\nimport { Question } from \"../../state/ducks/questions/types\";\nimport { loadUser } from \"../../state/ducks/users/actions\";\nimport { User } from \"../../state/ducks/users/types\";\nimport { loadAnswer } from \"../../state/ducks/answers/actions\";\nimport { QuestionSection } from \"../components\";\nimport { AnswerSection } from \"../components\";\nimport { Spinner } from \"../components\";\nimport { QuestionForm } from \"../components\";\nimport { Answer } from \"../../state/ducks/answers/types\";\n\ninterface Props {\n  loadQuestions: any;\n  questions: Map<number, Question>;\n  nextPageUrl: string | null;\n  isFetchingQuestions: boolean;\n  isPostingQuestion: boolean;\n  isUpdatingQuestion: boolean;\n  loadUser: any;\n  users: Map<number, User>;\n  loadAnswer: any;\n  answers: Map<number, Answer>;\n  currentUser: string; // current user_id\n}\n\nfunction Home(props: Props) {\n  useEffect(() => {\n    // if the first page of questions have not been fetched yet\n\n    // (or it have but the there is no 20 questions in the database\n    // but in that case the loadQuestion logic should handle it)\n    if (props.questions.size < 20) {\n      props.loadQuestions();\n    }\n    document.title = \"Sal - The best QA engine?\";\n  }, []);\n  const requestedUsers = useRef<Set<string>>(new Set());\n  useEffect(() => {\n    for (const question of props.questions.values()) {\n      // do not make multiple requests with the same id\n      // we've requested the current user in in App component\n      if (\n        !requestedUsers.current.has(question.user_id) &&\n        question.user_id !== props.currentUser\n      ) {\n        props.loadUser(question.user_id);\n        requestedUsers.current.add(question.user_id);\n      }\n      // fetch answers\n      props.loadAnswer(question.best_answer || question.answers[0]);\n    }\n  }, [props.questions]);\n\n  useEffect(() => {\n    for (const answer of props.answers.values()) {\n      if (\n        !requestedUsers.current.has(answer.user_id) &&\n        answer.user_id !== props.currentUser\n      ) {\n        props.loadUser(answer.user_id);\n        requestedUsers.current.add(answer.user_id);\n      }\n    }\n  }, [props.answers]);\n\n  function handleFetchNewQuestions() {\n    props.loadQuestions();\n  }\n\n  let QAComponents: ReactNode[] = [];\n  for (const question of props.questions.values()) {\n    QAComponents.push(\n      <div key={question.id}>\n        <QuestionSection\n          key={question.id}\n          style={{ margin: \"50px 7px 0\" }}\n          question={question}\n        />\n        <AnswerSection\n          bestAnswer={question.best_answer}\n          answerExists={question.answers.length > 0}\n          answer={props.answers.get(\n            question.best_answer || question.answers[0]\n          )}\n          questionId={question.id}\n          questionUserId={question.user_id}\n          isUpdatingQuestion={props.isUpdatingQuestion}\n        />\n      </div>\n    );\n  }\n  // homepage top spinner condition\n  const condition =\n    (props.isFetchingQuestions && props.questions.size === 0) ||\n    props.isPostingQuestion;\n  return (\n    <div className=\"content-container\" style={{ marginBottom: \"50px\" }}>\n      <QuestionForm style={{ marginTop: \"50px\" }} />\n      {/* show spinner on homepage top */}\n      {condition && (\n        <div className=\"spinner-container\" style={{ height: \"180px\" }}>\n          <Spinner className=\"spinner-sm spinner-centered\" />\n        </div>\n      )}\n      {QAComponents}\n      {props.nextPageUrl && (\n        <div\n          style={{ textAlign: \"center\", marginTop: \"30px\" }}\n          onClick={handleFetchNewQuestions}\n        >\n          <button className=\"btn btn-link\">Load More</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    currentUser: state.auth0.currentUser,\n    questions: state.questions.entities,\n    nextPageUrl: state.questions.nextPageUrl,\n    isFetchingQuestions: state.questions.isFetching,\n    isPostingQuestion: state.questions.isPosting,\n    isUpdatingQuestion: state.questions.isUpdating,\n    users: state.users.entities,\n    answers: state.answers.entities,\n  };\n}\nconst mapDispatchToProps = {\n  loadQuestions,\n  loadUser,\n  loadAnswer,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React, { useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { loadQuestion } from \"../../state/ducks/questions/actions\";\nimport { Question } from \"../../state/ducks/questions/types\";\nimport { loadAnswer } from \"../../state/ducks/answers/actions\";\nimport { Answer } from \"../../state/ducks/answers/types\";\nimport { QuestionSection, Spinner, AnswerSection } from \"../components\";\n\ninterface Props {\n  loadQuestion: any;\n  loadAnswer: any;\n  questions: Map<number, Question>;\n  answers: Map<number, Answer>;\n  isUpdatingQuestion: boolean;\n}\nfunction QuestionPage(props: Props) {\n  const history = useHistory();\n  const { questionId } = useParams();\n  useEffect(() => {\n    props.loadQuestion(parseInt(questionId));\n  }, []);\n\n  useEffect(() => {\n    const question = props.questions.get(parseInt(questionId));\n    if (question) {\n      for (const answer_id of question.answers) {\n        props.loadAnswer(answer_id);\n      }\n      document.title = \"Sal - \" + question.content.slice(0, 24) + \"...\";\n    }\n  }, [props.questions]);\n\n  const question = props.questions.get(parseInt(questionId));\n  if (!question) {\n    return (\n      <div className=\"spinner-container\" style={{ height: \"180px\" }}>\n        <Spinner className=\"spinner-sm spinner-centered\" />\n      </div>\n    );\n  }\n\n  const answers = [];\n  for (const answer_id of question.answers) {\n    if (answer_id === question.best_answer) {\n      // show best answer at the begging of answerSection\n      answers.unshift(props.answers.get(answer_id));\n    } else {\n      answers.push(props.answers.get(answer_id));\n    }\n  }\n  return (\n    <div className=\"content-container\" style={{ marginBottom: \"50px\" }}>\n      <button\n        className=\"btn btn-link\"\n        style={{ padding: \"14px 7px\", color: \"#323130\" }}\n        onClick={() => history.goBack()}\n      >\n        &lt;&nbsp; Back\n      </button>\n      <QuestionSection style={{ margin: \"0px 7px 0\" }} question={question} />\n      <AnswerSection\n        questionId={question.id}\n        questionUserId={question.user_id}\n        isUpdatingQuestion={props.isUpdatingQuestion}\n        answerExists={question.answers.length > 0}\n        bestAnswer={question.best_answer}\n        answers={answers}\n      />\n    </div>\n  );\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    questions: state.questions.entities,\n    isUpdatingQuestion: state.questions.isUpdating,\n    answers: state.answers.entities,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadQuestion,\n  loadAnswer,\n};\n\n// export as any due to problem with typescript\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(QuestionPage) as any;\n","export enum Types {\n  SEARCH_REQUEST = \"SEARCH_REQUEST\",\n  SEARCH_SUCCESS = \"SEARCH_SUCCESS\",\n  SEARCH_FAILURE = \"SEARCH_FAILURE\",\n}\n\nexport interface Question {\n  id: number;\n  user_id: string;\n  content: string;\n  created_at: string;\n  best_answer: number | null;\n  answers: number[];\n}\n","import { Types } from \"./types\";\nimport { CALL_API } from \"../../middlewares/apiService\";\n\n// load questions by page\nfunction searchQuestions(search: string, nextPageUrl: string) {\n  return {\n    [CALL_API]: {\n      endpoint: nextPageUrl,\n      types: [Types.SEARCH_REQUEST, Types.SEARCH_SUCCESS, Types.SEARCH_FAILURE],\n      config: {\n        method: \"POST\",\n        body: JSON.stringify({\n          search: search,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      },\n    },\n  };\n}\n\nexport function loadSearch(search: string) {\n  return function (dispatch: any, getState: any) {\n    const { searchTerm, nextPageUrl = \"/api/search\", pageCount = 0 } =\n      getState().search || {};\n\n    // searchTerm have changed\n    if (searchTerm !== null && searchTerm !== search) {\n      return dispatch(searchQuestions(search, '/api/search'))\n    }\n    // don't make pointless requests\n    if (pageCount > 0 && !nextPageUrl) {\n      return null;\n    }\n    // initial call\n    return dispatch(searchQuestions(search, nextPageUrl));\n  };\n}\n","import React, { ReactNode, useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useLocation, Link } from \"react-router-dom\";\nimport { Spinner, QuestionSection } from \"../components\";\nimport { loadSearch } from \"../../state/ducks/search/actions\";\nimport { loadUser } from \"../../state/ducks/users/actions\";\n\ninterface Props {\n  questions: Map<number, any>;\n  isFetchingQuestions: boolean;\n  nextPageUrl: string;\n  loadSearch: any;\n  loadUser: any;\n  currentUser: string;\n}\nfunction SearchPage(props: Props) {\n  const { search } = useLocation();\n  const params = new URLSearchParams(search);\n  useEffect(() => {\n    if (params.get(\"term\")) {\n      props.loadSearch(params.get(\"term\"));\n      document.title = \"Sal - search for \" + params.get(\"term\")\n    }\n  }, [search]);\n\n  const requestedUsers = useRef<Set<string>>(new Set());\n  useEffect(() => {\n    for (const question of props.questions.values()) {\n      // do not make multiple requests with the same id\n      // we've requested the current user in in App component\n      if (\n        !requestedUsers.current.has(question.user_id) &&\n        question.user_id !== props.currentUser\n      ) {\n        props.loadUser(question.user_id);\n        requestedUsers.current.add(question.user_id);\n      }\n    }\n  }, [props.questions]);\n\n  if (!params.get(\"term\")) {\n    return (\n      <div className=\"content-container\">\n        <h1>You've searched for nothing!</h1>\n      </div>\n    );\n  }\n\n  function handleFetchNewQuestions() {\n    props.loadSearch(params.get(\"term\"));\n  }\n\n  let QComponents: ReactNode[] = [];\n  for (const question of props.questions.values()) {\n    QComponents.push(\n      <div key={question.id}>\n        <QuestionSection\n          key={question.id}\n          style={{ margin: \"50px 7px 0\" }}\n          question={question}\n        />\n        <div className=\"card answer\">\n          <div className=\"answer-cta-section\">\n            <Link to={`/questions/${question.id}`} className=\"btn btn-link\">\n              View Question\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  // search top spinner condition\n  const condition = props.isFetchingQuestions && props.questions.size === 0;\n  return (\n    <div className=\"content-container\" style={{ marginBottom: \"50px\" }}>\n      {/* show spinner on search page */}\n      {condition && (\n        <div className=\"spinner-container\" style={{ height: \"180px\" }}>\n          <Spinner className=\"spinner-sm spinner-centered\" />\n        </div>\n      )}\n      {QComponents}\n      {props.nextPageUrl && (\n        <div\n          style={{ textAlign: \"center\", marginTop: \"30px\" }}\n          onClick={handleFetchNewQuestions}\n        >\n          <button className=\"btn btn-link\">Load More</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    currentUser: state.auth0.currentUser,\n    questions: state.search.entities,\n    isFetchingQuestions: state.search.isFetching,\n    nextPageUrl: state.search.nextPageUrl,\n  };\n}\nconst mapDispatchToProps = {\n  loadSearch,\n  loadUser,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);\n","import { Home } from \"../views/pages\";\nimport { QuestionPage } from \"../views/pages\";\nimport { SearchPage } from \"../views/pages\";\nconst routes = [\n  {\n    path: \"/\",\n    component: Home,\n    exact: true,\n  },\n  {\n    path: \"/questions/:questionId\",\n    component: QuestionPage,\n    exact: true,\n  },\n  {\n    path: \"/search\",\n    component: SearchPage,\n    exact: true\n  }\n];\n\nexport default routes;\n","import React, { useEffect } from \"react\";\nimport config from \"../../auth_config.json\";\nimport history from \"../../state/ducks/auth0/utils\";\nimport { initAuth0 } from \"../../state/ducks/auth0/actions\";\nimport { loadUser } from \"../../state/ducks/users/actions\";\nimport { connect } from \"react-redux\";\nimport { Router, Route } from \"react-router-dom\";\nimport routes from \"../../routes\";\nimport { Header, Spinner, Footer } from \"../components\";\n\ninterface Props {\n  initAuth0: any;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  currentUser: string;\n  loadUser: any;\n}\nfunction App(props: Props) {\n  useEffect(() => {\n    const handleAuth0Redirect = (appState: any) => {\n      history.push(\n        appState && appState.targetUrl\n          ? appState.targetUrl\n          : window.location.pathname\n      );\n    };\n\n    props.initAuth0(\n      {\n        domain: config.domain,\n        client_id: config.clientId,\n        audience: config.audience,\n        redirect_uri: window.location.origin,\n        useRefreshToken: config.useRefreshToken,\n      },\n      handleAuth0Redirect\n    );\n  }, []);\n  useEffect(() => {\n    // load currentUser\n    if (props.isAuthenticated) {\n      props.loadUser(props.currentUser);\n    }\n  }, [props.isAuthenticated]);\n\n  if (props.isLoading) {\n    return (\n      <div className=\"app\">\n        <Spinner className=\"spinner spinner-centered\" />\n      </div>\n    );\n  }\n\n  return (\n    <Router history={history}>\n      <Header />\n      {props.isAuthenticated && (\n        <div>\n          {routes.map((route) => {\n            return <Route key={route.path} {...route} />;\n          })}\n        </div>\n      )}\n      <Footer />\n    </Router>\n  );\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    isLoading: state.auth0.isLoading,\n    isAuthenticated: state.auth0.isAuthenticated,\n    currentUser: state.auth0.currentUser,\n  };\n}\n\nconst mapDispatchToProps = {\n  initAuth0,\n  loadUser,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import Types, { Auth0ActionTypes } from \"./types\";\nconst defaultState = {\n  isLoading: true,\n  errorMessage: null,\n  accessToken: null,\n  isAuthenticated: false,\n  currentUser: null,\n  client: null,\n};\n\nfunction auth0Reducer(state = defaultState, action: Auth0ActionTypes) {\n  switch (action.type) {\n    case Types.INIT_AUTH0_REQUEST:\n      return Object.assign({}, state, {\n        isLoading: true,\n      });\n    case Types.INIT_AUTH0_SUCCESS:\n      return Object.assign({}, state, {\n        isLoading: false,\n        client: action.payload.auth0Client,\n        isAuthenticated: action.payload.isAuthenticated,\n        accessToken: action.payload.accessToken,\n        currentUser: action.payload.currentUser,\n      });\n    case Types.INIT_AUTH0_ERROR:\n      return Object.assign({}, state, {\n        isLoading: false,\n        errorMessage: action.error,\n      });\n    default:\n      return state;\n  }\n}\n\nexport default auth0Reducer;\n","import reducer from \"./reducers\";\n\nexport default reducer;\n","import { Types, Question } from \"./types\";\nimport { Types as AnswersTypes } from \"../answers/types\";\nconst defaultState = {\n  isFetching: false,\n  isPosting: false,\n  isUpdating: false,\n  errorMessage: null,\n  pageCount: 0, // we haven't fetched any page yet\n  entities: new Map<number, Question>(),\n};\n\nfunction questionsReducer(state = defaultState, action: any) {\n  switch (action.type) {\n    case Types.QUESTIONS_REQUEST:\n      return Object.assign({}, state, {\n        isFetching: true,\n      });\n    case Types.QUESTIONS_SUCCESS: {\n      let newEntities = new Map(state.entities); // clone old questions\n      for (const entity of action.payload.questions) {\n        newEntities.set(entity.id, entity);\n      }\n      return Object.assign({}, state, {\n        isFetching: false,\n        entities: newEntities,\n        nextPageUrl: action.payload.next_path,\n        noOfQuestions: action.payload.no_of_questions,\n        lastUpdated: action.receivedAt,\n        pageCount: state.pageCount + 1,\n      });\n    }\n    case Types.QUESTIONS_FAILURE:\n      return Object.assign({}, state, {\n        errorMessage: action.error,\n        isFetching: false,\n      });\n    case Types.QUESTION_REQUEST:\n      return Object.assign({}, state, {\n        isFetching: true,\n      });\n    case Types.QUESTION_SUCCESS: {\n      let newEntities = new Map(state.entities); // clone old questions\n      newEntities.set(action.payload.question.id, action.payload.question);\n      return Object.assign({}, state, {\n        isFetching: false,\n        entities: newEntities,\n        lastUpdated: action.receivedAt,\n      });\n    }\n    case Types.QUESTION_FAILURE:\n      return Object.assign({}, state, {\n        errorMessage: action.error,\n        isFetching: false,\n      });\n    case Types.Q_DELETE_REQUEST:\n      return Object.assign({}, state, {\n        isFetching: true,\n      });\n    case Types.Q_DELETE_SUCCESS: {\n      const newEntities = new Map(state.entities);\n      newEntities.delete(action.payload.del_id);\n      return Object.assign({}, state, {\n        entities: newEntities,\n        isFetching: false,\n      });\n    }\n    case Types.Q_DELETE_FAILURE:\n      return Object.assign({}, state, {\n        isFetching: false,\n        errorMessage: action.error,\n      });\n\n    case Types.Q_POST_REQUEST:\n      return Object.assign({}, state, {\n        isPosting: true,\n      });\n    case Types.Q_POST_SUCCESS: {\n      const newEntities = new Map([\n        [action.payload.created.id, action.payload.created],\n        ...state.entities,\n      ]);\n      return Object.assign({}, state, {\n        isPosting: false,\n        entities: newEntities,\n      });\n    }\n    case Types.Q_POST_FAILURE:\n      return Object.assign({}, state, {\n        isPosting: false,\n        errorMessage: action.error,\n      });\n    case Types.Q_BA_REQUEST:\n      return Object.assign({}, state, {\n        isUpdating: true,\n      });\n    case Types.Q_BA_SUCCESS: {\n      const newEntities = new Map(state.entities);\n      newEntities.set(action.payload.patched.id, action.payload.patched);\n      return Object.assign({}, state, {\n        isUpdating: false,\n        entities: newEntities,\n      });\n    }\n    case Types.Q_BA_FAILURE: {\n      return Object.assign({}, state, {\n        isUpdating: false,\n        errorMessage: action.error,\n      });\n    }\n\n    // Update questions based on answers types\n    case AnswersTypes.A_DELETE_SUCCESS: {\n      const newEntities = new Map(state.entities);\n      const question = newEntities.get(action.payload.question_id) as Question;\n      // remove deleted id from question answers array\n      question.answers = question.answers.filter(\n        (id) => id !== action.payload.del_id\n      );\n      if (question.best_answer === action.payload.del_id) {\n        question.best_answer = null;\n      }\n      return Object.assign({\n        entities: newEntities,\n      });\n    }\n\n    case AnswersTypes.A_POST_SUCCESS: {\n      const newEntities = new Map(state.entities);\n      const question = newEntities.get(\n        action.payload.created.question_id\n      ) as Question;\n      // add the created id to the first of the question answers array\n      question.answers.unshift(action.payload.created.id);\n      return Object.assign({\n        entities: newEntities,\n      });\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default questionsReducer;\n","import reducer from \"./reducers\";\nexport default reducer;\n","import { Types, User } from \"./types\";\nconst defaultState = {\n  isFetching: false,\n  errorMessage: null,\n  entities: new Map<string, User>(),\n};\n\nfunction usersReducer(state = defaultState, action: any) {\n  switch (action.type) {\n    case Types.USER_REQUEST:\n      return Object.assign({}, state, {\n        isFetching: true,\n      });\n    case Types.USER_SUCCESS: {\n      let newEntities = new Map(state.entities); // clone old questions\n      newEntities.set(action.payload.user.user_id, action.payload.user);\n      return Object.assign({}, state, {\n        isFetching: false,\n        entities: newEntities,\n        lastUpdated: action.receivedAt,\n      });\n    }\n    case Types.USER_FAILURE:\n      return Object.assign({}, state, {\n        errorMessage: action.error,\n        isFetching: false,\n      });\n    default:\n      return state;\n  }\n}\n\nexport default usersReducer;\n","import reducer from \"./reducers\";\nexport default reducer;\n","import { Types, Answer } from \"./types\";\nconst defaultState = {\n  isFetching: false,\n  isPosting: false,\n  errorMessage: null,\n  entities: new Map<number, Answer>(),\n};\n\nfunction answersReducer(state = defaultState, action: any) {\n  switch (action.type) {\n    case Types.ANSWER_REQUEST:\n      return Object.assign({}, state, {\n        isFetching: true,\n      });\n    case Types.ANSWER_SUCCESS: {\n      let newEntities = new Map(state.entities); // clone old questions\n      newEntities.set(action.payload.answer.id, action.payload.answer);\n      return Object.assign({}, state, {\n        isFetching: false,\n        entities: newEntities,\n        lastUpdated: action.receivedAt,\n      });\n    }\n    case Types.ANSWER_FAILURE:\n      return Object.assign({}, state, {\n        errorMessage: action.error,\n        isFetching: false,\n      });\n    case Types.A_DELETE_REQUEST:\n      return Object.assign({}, state, {\n        isFetching: true,\n      });\n    case Types.A_DELETE_SUCCESS: {\n      const newEntities = new Map(state.entities);\n      newEntities.delete(action.payload.del_id);\n      return Object.assign({}, state, {\n        entities: newEntities,\n        isFetching: false,\n      });\n    }\n    case Types.A_DELETE_FAILURE:\n      return Object.assign({}, state, {\n        isFetching: false,\n        errorMessage: action.error,\n      });\n    case Types.A_POST_REQUEST:\n      return Object.assign({}, state, {\n        isPosting: true,\n      });\n    case Types.A_POST_SUCCESS: {\n      const newEntities = new Map([\n        [action.payload.created.id, action.payload.created],\n        ...state.entities,\n      ]);\n      return Object.assign({}, state, {\n        isPosting: false,\n        entities: newEntities,\n      });\n    }\n    case Types.A_POST_FAILURE:\n      return Object.assign({}, state, {\n        isPosting: false,\n        errorMessage: action.error,\n      });\n    default:\n      return state;\n  }\n}\n\nexport default answersReducer;\n","import reducer from \"./reducers\";\nexport default reducer;\n","import { Types, Question } from \"./types\";\nconst defaultState = {\n  isFetching: false,\n  errorMessage: null,\n  searchTerm: null,\n  pageCount: 0, // we haven't fetched any page yet\n  entities: new Map<number, Question>(),\n};\n\nfunction searchReducer(state = defaultState, action: any) {\n  switch (action.type) {\n    case Types.SEARCH_REQUEST:\n      return Object.assign({}, state, {\n        isFetching: true,\n      });\n    case Types.SEARCH_SUCCESS: {\n      let newEntities;\n      // searchTerm have changed\n      if (state.searchTerm && state.searchTerm !== action.payload.search_term) {\n        newEntities = new Map(); // clear old entities\n      } else {\n        newEntities = new Map(state.entities); // clone old questions\n      }\n      for (const entity of action.payload.questions) {\n        newEntities.set(entity.id, entity);\n      }\n      return Object.assign({}, state, {\n        isFetching: false,\n        entities: newEntities,\n        nextPageUrl: action.payload.next_path,\n        noOfQuestions: action.payload.no_of_questions,\n        lastUpdated: action.receivedAt,\n        pageCount: state.pageCount + 1,\n        searchTerm: action.payload.search_term\n      });\n    }\n    case Types.SEARCH_FAILURE:\n      return Object.assign({}, state, {\n        errorMessage: action.error,\n        isFetching: false,\n      });\n    default:\n      return state;\n  }\n}\n\nexport default searchReducer;\n","import reducer from \"./reducers\";\nexport default reducer;\n","import thunkMiddleware from \"redux-thunk\";\n// import { createLogger } from \"redux-logger\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport * as reducers from \"./ducks\";\nimport apiService from \"./middlewares/apiService\";\n\n// const loggerMiddleware = createLogger();\n\nconst store = createStore(\n  combineReducers(reducers),\n  applyMiddleware(\n    apiService,\n    thunkMiddleware\n    // loggerMiddleware\n  )\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/main.scss\";\nimport { App } from \"./views/layouts\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport store from \"./state/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReduxProvider store={store}>\n      <App />\n    </ReduxProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}